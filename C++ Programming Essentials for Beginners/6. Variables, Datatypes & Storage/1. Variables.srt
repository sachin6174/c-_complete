1
00:00:01,120 --> 00:00:03,670
I in this lecture, we will talk about variables.

2
00:00:04,060 --> 00:00:10,240
Let's see what variables are so variables as you know, they are the buckets that can hold data.

3
00:00:10,510 --> 00:00:17,740
And now this data can have different types, so the buckets will also have different right to.

4
00:00:17,740 --> 00:00:19,900
Some buckets may require a larger space.

5
00:00:20,050 --> 00:00:21,970
Some buckets made it quite a lesser space.

6
00:00:22,540 --> 00:00:24,160
So us because I love this concept.

7
00:00:24,520 --> 00:00:28,240
But before that, let's talk a little bit more about the variables, OK?

8
00:00:28,860 --> 00:00:32,520
So when you're creating a variable, you give a name to that particular ribbon.

9
00:00:32,530 --> 00:00:36,760
So a name is just a label or a memory location.

10
00:00:36,970 --> 00:00:42,730
So, for example, you create a bucket called monks and you say, OK, so this creates a bucket.

11
00:00:43,570 --> 00:00:47,920
And when you're creating this bucket, you also need to define what kind of data this bucket can hold.

12
00:00:48,130 --> 00:00:52,240
So we will define or get this bucket can hold in indeed the type of data.

13
00:00:53,230 --> 00:00:58,690
So this is how you create a video, but then you also have some value that you can put inside that bucket.

14
00:00:58,690 --> 00:01:01,570
Maybe you want to store wind inside this bucket.

15
00:01:01,630 --> 00:01:05,140
So you will see OK, marks equals 220.

16
00:01:05,500 --> 00:01:09,820
Creating the bucket is one thing holding balloons and the bucket is another thing.

17
00:01:10,090 --> 00:01:10,360
OK.

18
00:01:11,350 --> 00:01:13,600
And third, third content storage.

19
00:01:13,730 --> 00:01:15,360
Where are these variables stored?

20
00:01:16,000 --> 00:01:21,700
They are stored in the part of memory that we call it azra that's stored in the random access memory,

21
00:01:22,450 --> 00:01:24,850
which is again a hardware unit on your system.

22
00:01:25,810 --> 00:01:31,190
The first thing is declaration announcing a variable at the beginning of the program.

23
00:01:31,210 --> 00:01:37,480
So here we're announcing that within this program, we would be using a bucket whose name is MOCS.

24
00:01:37,630 --> 00:01:43,960
So this thing is known as declarations, and we have declared a variable and we have told the compiler,

25
00:01:43,960 --> 00:01:47,290
you reserve some memory for a bucket called marks.

26
00:01:48,340 --> 00:01:55,360
And when you're creating variables, you also need to define certain rules or certain rules that define

27
00:01:55,360 --> 00:01:58,770
you have to name the variables according to those rules.

28
00:01:58,780 --> 00:01:59,890
OK, so those rules?

29
00:02:00,910 --> 00:02:02,290
We will see what those rules are.

30
00:02:03,040 --> 00:02:07,060
And last but not the listing assignment.

31
00:02:07,570 --> 00:02:14,140
So giving variable a value to this statement that we have written here, we are putting some value inside

32
00:02:14,140 --> 00:02:15,040
the variables bucket.

33
00:02:15,100 --> 00:02:16,690
So this is known as assignment.

34
00:02:17,780 --> 00:02:20,870
OK, this equal was known as assignment operator.

35
00:02:21,470 --> 00:02:27,350
So this is how you put something into the bucket or you assign some value to that particular bucket.

36
00:02:28,430 --> 00:02:32,720
Now let us discuss the various rules that you can follow.

37
00:02:33,410 --> 00:02:37,250
You will have to follow while naming the variables before naming a variable.

38
00:02:37,250 --> 00:02:43,010
We can use an uppercase or a lowercase letter, or we can use digits from one to nine.

39
00:02:43,640 --> 00:02:50,540
But the first character must be an underscore or a letter, or you cannot have a variable which starts

40
00:02:50,540 --> 00:02:51,380
from a number.

41
00:02:51,410 --> 00:02:58,640
For example, this one, this is a invalid variable name because it starts from a number on C++ is a

42
00:02:58,640 --> 00:03:00,250
strongly typed language.

43
00:03:00,290 --> 00:03:01,160
What does it mean?

44
00:03:01,730 --> 00:03:05,060
It basically means with every language or with every variable.

45
00:03:05,060 --> 00:03:12,680
You need to define the type of that particular look so it cannot figure out automatically.

46
00:03:15,030 --> 00:03:21,360
You have to define what kind of market it is to every variable needs to be declared before using it.

47
00:03:22,200 --> 00:03:27,950
So you create a variable simple interest, student age, flawed student percentile and so on.

48
00:03:27,950 --> 00:03:34,290
And so every variable is declared and every variable is declared using a data type.

49
00:03:35,340 --> 00:03:38,430
And very soon we'll discuss about the rapes as well, right?

50
00:03:39,330 --> 00:03:43,020
So that's all what you need to know about variables.

51
00:03:43,650 --> 00:03:49,540
And yes, there is one more thing that initialization when you just declare the variables and you don't

52
00:03:49,540 --> 00:03:51,510
store it anyway inside that particular area.

53
00:03:51,630 --> 00:03:56,130
So you simply say, I'm declaring a variable B at this point.

54
00:03:56,160 --> 00:03:58,980
This B is going to store garbage.

55
00:03:59,250 --> 00:04:00,210
So what is garbage?

56
00:04:01,050 --> 00:04:04,830
By default, the memory is going to have some random collection of bits.

57
00:04:05,490 --> 00:04:08,430
And this can can be can, can be any random number.

58
00:04:08,490 --> 00:04:10,860
So we call this any random number as garbage.

59
00:04:11,790 --> 00:04:18,120
So by default, the variables, if they're not initialized, if they're not assigned any value, they

60
00:04:18,120 --> 00:04:19,140
will contain garbage.

61
00:04:19,860 --> 00:04:24,990
We can also assign a specific value from the moment when the variable is created.

62
00:04:25,000 --> 00:04:31,830
So this is known as initialization of the variable, for example, this at this point, we are declaring

63
00:04:31,830 --> 00:04:35,040
the variable and at the same time, we are assigning it some value.

64
00:04:35,700 --> 00:04:41,640
So doing this declaration plus assignment at the same time, it is also known as initialization of the

65
00:04:41,640 --> 00:04:47,290
variable because we are defining what this variable is going to hold initially.

66
00:04:47,690 --> 00:04:50,940
This is known as initialization of the variable.

67
00:04:51,870 --> 00:04:57,240
So I hope you have understood these concepts related to the variables, and in the next lecture, we'll

68
00:04:57,240 --> 00:04:58,680
talk about the rapes.

1
00:00:02,200 --> 00:00:07,780
Hello, everyone, in the section, we'll talk about a very interesting algorithm that we know that

2
00:00:07,960 --> 00:00:13,990
that is used for searching, and that is it's a very simple technique that is known as linear search.

3
00:00:14,470 --> 00:00:16,150
So let us talk about what is linear.

4
00:00:17,080 --> 00:00:22,870
So it's a searching algorithm that is used to find the index of an element in a given area.

5
00:00:23,320 --> 00:00:29,380
For example, let's say you go to a restaurant and there are certain items in the menu.

6
00:00:29,380 --> 00:00:33,190
Let's say you have dosa, you have noodles.

7
00:00:33,730 --> 00:00:37,260
You have, let's say, rajma, OK?

8
00:00:37,540 --> 00:00:38,710
And maybe you have burger.

9
00:00:39,940 --> 00:00:45,010
So let's say you went to the restaurant for the first time and there is a large menu and you're looking

10
00:00:45,010 --> 00:00:46,360
for an item to cook.

11
00:00:48,250 --> 00:00:48,910
So what do you do?

12
00:00:48,940 --> 00:00:54,820
You start out reading through all of the menu items and you start looking at various co-presidents,

13
00:00:54,820 --> 00:00:59,410
so you see, OK, this is where the caucus president didn't say this particular list.

14
00:00:59,920 --> 00:01:02,650
What you did, you went through every item and you scanned it.

15
00:01:02,970 --> 00:01:03,260
OK.

16
00:01:03,280 --> 00:01:04,890
Doesn't match my requirements.

17
00:01:04,900 --> 00:01:07,150
If yes, I stop at that particular point.

18
00:01:07,630 --> 00:01:13,360
This way of searching in an area is known as linear search, and it's a brute force technique.

19
00:01:13,360 --> 00:01:18,610
You can say we are trying out all possibilities where a particular element is present.

20
00:01:19,150 --> 00:01:22,360
So let us look at in the context of voting digitally.

21
00:01:22,360 --> 00:01:28,720
For example, we are given the city which contains some number of elements, and we want to search for

22
00:01:28,720 --> 00:01:30,010
a particular Gladys Knight.

23
00:01:30,460 --> 00:01:34,780
So what we will do is go to this index and will check, does it March nine?

24
00:01:35,020 --> 00:01:35,830
No, it doesn't.

25
00:01:35,860 --> 00:01:38,200
We go to the next, does it March nine?

26
00:01:38,290 --> 00:01:39,010
No, it doesn't.

27
00:01:39,040 --> 00:01:39,910
We go to the next.

28
00:01:40,270 --> 00:01:41,410
Next, next.

29
00:01:41,980 --> 00:01:43,720
And finally, we come at this place.

30
00:01:44,110 --> 00:01:49,390
Does this Adelphi my matches over key nine or not?

31
00:01:49,420 --> 00:01:50,620
Yes, it does.

32
00:01:50,620 --> 00:01:53,800
Match, then what we do, we stop over search.

33
00:01:53,860 --> 00:01:59,950
We don't want to go any further and say, OK, stop and return their index of this particular element.

34
00:02:00,280 --> 00:02:07,330
And if this is not present, we can return some value, let's say minus one if a limit is not found.

35
00:02:08,790 --> 00:02:09,060
OK.

36
00:02:09,640 --> 00:02:10,410
What we will do.

37
00:02:10,620 --> 00:02:13,560
We will now write a function to do linear search.

38
00:02:14,490 --> 00:02:20,730
And let's see how we can do it so I can see in linear search.

39
00:02:22,840 --> 00:02:29,860
We have Eddie, and we have it and OK, that denotes the size of Betty.

40
00:02:30,160 --> 00:02:35,220
And one more thing we will get is the key, the value for which we are looking inside this particular

41
00:02:35,220 --> 00:02:35,530
ready.

42
00:02:36,010 --> 00:02:42,730
So what we will do, it will read from an equal to zero I less than an A-plus plus.

43
00:02:43,090 --> 00:02:46,120
And here we can check it, Jake.

44
00:02:46,120 --> 00:02:55,090
If current element matches with key to the current element, as at Alpha, if this matches with the

45
00:02:55,090 --> 00:02:57,690
key element, then we can simply return.

46
00:02:57,700 --> 00:03:02,590
I will give you found out the element that you are looking for, and that's it.

47
00:03:03,100 --> 00:03:09,700
And once if you come out of the loop or get out of the loop, that means you have already reached.

48
00:03:10,210 --> 00:03:11,950
You've already scanned the elements.

49
00:03:12,310 --> 00:03:18,180
And this written statement was not executed so that in that case, we can return minus one.

50
00:03:18,190 --> 00:03:23,410
But this element does actually not present inside this edit.

51
00:03:23,650 --> 00:03:28,600
Now what we can do, we can create an array of, let's say, some numbers.

52
00:03:29,320 --> 00:03:34,210
It's a 10, 15, 12, nine six four three.

53
00:03:34,720 --> 00:03:39,850
And and it and.

54
00:03:40,920 --> 00:03:45,300
And this letter size of Eddie, a bond size of eight.

55
00:03:47,400 --> 00:03:51,870
And you can say the key is something that is given by the user, I don't know.

56
00:03:52,710 --> 00:04:00,450
So see in key, I take in put that particular key and I check the index by calling this method linear

57
00:04:00,450 --> 00:04:00,900
search.

58
00:04:02,550 --> 00:04:07,740
And and key, I check if this index is not equal to minus one.

59
00:04:08,280 --> 00:04:11,010
I bring your element as present.

60
00:04:12,830 --> 00:04:15,260
He is present at index.

61
00:04:15,890 --> 00:04:19,010
And here we bring the index that is index.

62
00:04:20,860 --> 00:04:26,410
Otherwise we going to see out this particular key is not found.

63
00:04:28,470 --> 00:04:31,050
That's it, let's build a good.

64
00:04:32,000 --> 00:04:33,590
And let us try to run it.

65
00:04:36,530 --> 00:04:42,110
So this is a dodge slash, you know, three linear search.

66
00:04:44,770 --> 00:04:49,570
And I need to give up your religion nine to nine is present at index three.

67
00:04:49,910 --> 00:04:53,620
This is what we get two, zero, one, two and three.

68
00:04:53,650 --> 00:05:02,410
Yes, nine is president at Index three, where if I give it to the number 19, if it is 19, is not

69
00:05:02,620 --> 00:05:03,040
found.

70
00:05:03,770 --> 00:05:08,260
Let us also talk about how much time Discord will take in the worst case.

71
00:05:08,710 --> 00:05:15,400
OK, so what we are doing in this court is in the worst case, we are iterating over the entirety the

72
00:05:15,400 --> 00:05:16,750
number of operations.

73
00:05:17,440 --> 00:05:24,220
The number of instructions that we are going to execute is going to be proportional to the value of

74
00:05:24,220 --> 00:05:24,680
in give.

75
00:05:24,760 --> 00:05:26,880
The larger is the value of in LA.

76
00:05:26,920 --> 00:05:28,270
This is the time taken, OK?

77
00:05:28,630 --> 00:05:35,370
And it is going to be a linear function of n so begins in this linear search has a complexity of order

78
00:05:35,380 --> 00:05:35,740
often.

79
00:05:35,830 --> 00:05:36,100
OK.

80
00:05:36,580 --> 00:05:38,200
This is going to take all that off.

81
00:05:38,200 --> 00:05:44,040
And so that's all for this linear search algorithm.

82
00:05:44,050 --> 00:05:45,850
I hope you really understood this one.

83
00:05:46,300 --> 00:05:49,330
And in the next lecture, we will learn about binary search.

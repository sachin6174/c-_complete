1
00:00:00,620 --> 00:00:01,340
Hello, everyone.

2
00:00:01,670 --> 00:00:06,930
So in this lecture, we'll try to solve a problem where we will take input later on.

3
00:00:06,980 --> 00:00:13,880
We will try to identify whether it is a whitespace or is it a letter from zero to nine?

4
00:00:14,420 --> 00:00:20,360
Or is it a uppercase letter or is it a lowercase letter or it is a special symbol, OK?

5
00:00:20,870 --> 00:00:26,570
That is what we are going to do right now talking or the first thing that we have to do is we have to

6
00:00:26,570 --> 00:00:27,370
read some later.

7
00:00:27,380 --> 00:00:30,350
Okay, so let us try to read a particular letter.

8
00:00:30,350 --> 00:00:30,590
OK?

9
00:00:31,010 --> 00:00:35,810
Right now, what we know till now is that we can use theme to read it.

10
00:00:36,120 --> 00:00:43,220
Let's try to use scene to read it, and maybe I'll just output the letter as well, right?

11
00:00:44,030 --> 00:00:45,950
And let me just try to run this code.

12
00:00:46,430 --> 00:00:53,390
Sorry, we have to comment the problem statement here and now we can build it.

13
00:00:54,880 --> 00:01:02,800
If I now try to show you what happens if I run this program and dodge large, identify later and the

14
00:01:03,040 --> 00:01:03,580
I give in.

15
00:01:04,300 --> 00:01:08,470
And I do get the output great if I give five.

16
00:01:08,710 --> 00:01:10,810
OK, five can be stored as a little.

17
00:01:11,110 --> 00:01:11,740
That's OK.

18
00:01:12,970 --> 00:01:15,610
And if I give fifty nine.

19
00:01:16,840 --> 00:01:18,160
What is happening in this case?

20
00:01:18,370 --> 00:01:22,370
We are actually giving two letters and a world scene.

21
00:01:22,390 --> 00:01:25,880
It's going to only read the first letter that this fight will get.

22
00:01:25,930 --> 00:01:31,960
And even if you give something like a it, will read only the first letter that is h the scenes, which

23
00:01:31,960 --> 00:01:35,320
means only read the first and put.

24
00:01:36,570 --> 00:01:39,120
From here, that is what it is going to read.

25
00:01:40,140 --> 00:01:43,890
But now suppose I give some white space.

26
00:01:44,220 --> 00:01:46,020
What happens if I give a new line?

27
00:01:47,120 --> 00:01:51,110
The program is still working, it's it's not reading whitespace.

28
00:01:51,650 --> 00:01:56,930
If I give a little space base, it's still running, it's not reading whitespace.

29
00:01:57,440 --> 00:02:05,690
If I give it to space based aid, it is going to read the first letter that is OK, that is actually

30
00:02:05,690 --> 00:02:07,610
a problem with seen.

31
00:02:07,610 --> 00:02:08,540
It does not.

32
00:02:08,860 --> 00:02:11,250
It does not read white spaces.

33
00:02:11,270 --> 00:02:13,640
It ignores all the white spaces.

34
00:02:14,360 --> 00:02:18,950
Whatever problems is, we have to identify whether we have red or white space at night.

35
00:02:20,000 --> 00:02:21,200
So how do we solve this problem?

36
00:02:22,170 --> 00:02:25,470
In problems where you have to read white spaces as well.

37
00:02:26,190 --> 00:02:35,070
Here comes a function which is known as seen or get will not use seen will use Inderjit and not good

38
00:02:35,080 --> 00:02:39,250
reads all possible type of characters, including white spaces.

39
00:02:39,690 --> 00:02:40,020
OK.

40
00:02:40,710 --> 00:02:47,190
And generally, what happens with scene terminates when a white space is formed?

41
00:02:50,070 --> 00:02:54,990
And how not good reads a string with the whitespace, OK?

42
00:02:55,320 --> 00:03:00,460
So scene is just going to ignore, OK, to terminate might not be the right word.

43
00:03:00,480 --> 00:03:03,930
It just ignores whenever there is a white space.

44
00:03:03,940 --> 00:03:08,580
OK, so that means it will never read white space for you.

45
00:03:09,550 --> 00:03:13,560
Oh, it's not great, reads a string with the white space as well.

46
00:03:13,650 --> 00:03:19,210
OK, so now what we're going to do in our court, we are not going to use this statement.

47
00:03:19,230 --> 00:03:20,580
We are just going to come and read out.

48
00:03:21,650 --> 00:03:31,070
And we can see it equals the endgame that the scene is actually an object and objects do have methods.

49
00:03:31,970 --> 00:03:34,820
It is a method built on the scene object.

50
00:03:35,360 --> 00:03:36,680
And this is going to read.

51
00:03:38,150 --> 00:03:39,080
A single character.

52
00:03:39,110 --> 00:03:39,440
OK.

53
00:03:40,740 --> 00:03:46,530
It's going to create a single character, and that character can be whitespace as well.

54
00:03:46,860 --> 00:03:47,130
OK.

55
00:03:48,230 --> 00:03:50,750
Now what we are doing, we are going to run this code.

56
00:03:52,150 --> 00:03:55,810
Again, and let me show you, if I say.

57
00:03:58,290 --> 00:04:03,330
Whitespace and but we have to build it again, right?

58
00:04:05,240 --> 00:04:13,280
And let me just run this again whitespace, and so it did stop, the program did stop and it actually

59
00:04:13,280 --> 00:04:18,560
printed a whitespace because if you are not sure it did bring the whitespace, maybe what you can print,

60
00:04:18,560 --> 00:04:21,470
you can print the Australian white space.

61
00:04:22,370 --> 00:04:26,990
Let's see if I give white space, followed by an OK.

62
00:04:27,500 --> 00:04:29,300
Oh, you may ask, that is needed.

63
00:04:29,790 --> 00:04:34,010
See what happens now if you don't press enter.

64
00:04:34,010 --> 00:04:36,560
The data is still on the screen of the console.

65
00:04:36,560 --> 00:04:39,020
OK, it's not good to the algorithm.

66
00:04:39,530 --> 00:04:45,470
The algorithm reads data from something which is known as input buffer.

67
00:04:45,890 --> 00:04:46,340
OK.

68
00:04:46,790 --> 00:04:48,500
And currently we're on the screen.

69
00:04:49,810 --> 00:04:56,630
So on the screen, you have whitespace, ABC, whatever you have, it is, it's it's still change.

70
00:04:56,690 --> 00:05:00,310
Well, look, it's whatever you rated, it still can be erased.

71
00:05:00,580 --> 00:05:08,770
But once you put it, the into the input goes from the screen to input buffer, which is like a temporary

72
00:05:08,770 --> 00:05:12,910
storage and you're seeing audio Syndergaard.

73
00:05:14,400 --> 00:05:15,060
Both of them.

74
00:05:15,460 --> 00:05:17,940
They're going to read from the input booklet.

75
00:05:18,180 --> 00:05:18,510
OK.

76
00:05:18,990 --> 00:05:22,140
They're going to read from the input buffet, whatever you use.

77
00:05:22,770 --> 00:05:26,850
So if you have ABC, both of them are going to read ABC.

78
00:05:27,300 --> 00:05:34,680
But if you have, the only thing is you will need to put put a loop to read multiple characters and

79
00:05:34,730 --> 00:05:35,350
interject.

80
00:05:35,820 --> 00:05:38,700
It is also keen to read if there is a white space in the beginning.

81
00:05:38,700 --> 00:05:45,840
OK, so if you put a white space followed by a new line, it is going to read the white space as the

82
00:05:45,840 --> 00:05:46,410
first letter.

83
00:05:46,410 --> 00:05:46,650
OK?

84
00:05:47,250 --> 00:05:49,020
Let me show you if I put a.

85
00:05:49,290 --> 00:05:53,420
So is 65 if I give symbol white space and ended.

86
00:05:54,110 --> 00:05:55,530
So it is printing 32.

87
00:05:55,530 --> 00:05:58,200
So 32 is the Oscar value for space.

88
00:05:59,070 --> 00:06:01,080
And if I just hit a new line.

89
00:06:02,560 --> 00:06:09,460
It is printing tens or then this is just like the ASCII value of backslash.

90
00:06:09,610 --> 00:06:15,460
OK, we just give back lÃ©sion, but just then we give space, which is 32.

91
00:06:16,110 --> 00:06:19,340
It is reading both types of white spaces.

92
00:06:19,480 --> 00:06:23,390
Now the program was to identify what later it is.

93
00:06:23,410 --> 00:06:34,390
So what we can do is we can see if C-H equals white space or C, it equals new line.

94
00:06:35,550 --> 00:06:40,260
We can begin to see out under white space.

95
00:06:41,550 --> 00:06:43,890
Is what we can begin to if.

96
00:06:45,400 --> 00:06:47,650
See, it's three LS if.

97
00:06:48,630 --> 00:06:51,060
The edge is greater than equal to a.

98
00:06:52,700 --> 00:06:56,420
And it is less than equal to the night.

99
00:06:59,320 --> 00:07:02,950
Or C, it is greater than equal to smaller.

100
00:07:06,090 --> 00:07:09,070
And had just less than equal disloyalty.

101
00:07:12,090 --> 00:07:15,090
OK, begin to seal it so later, right?

102
00:07:15,210 --> 00:07:15,900
Maybe it's.

103
00:07:17,260 --> 00:07:17,800
Later.

104
00:07:19,980 --> 00:07:27,900
If you can see it is greater than equal to zero on the edges, greater than less than equal to nine.

105
00:07:28,770 --> 00:07:30,780
That means it's actually a digit.

106
00:07:32,270 --> 00:07:34,940
And as you can see, it's a special symbol.

107
00:07:37,670 --> 00:07:41,810
It's a team that actually completes our program.

108
00:07:42,620 --> 00:07:50,300
But before that, let us try to see how we have ridden these comparisons again, why these comparisons

109
00:07:50,300 --> 00:07:50,810
will work.

110
00:07:51,230 --> 00:07:53,690
Now suppose your letter was actually.

111
00:07:54,920 --> 00:07:59,300
What we are doing, we are saying, is this greater than equal to eight?

112
00:08:00,080 --> 00:08:02,450
That means two.

113
00:08:02,450 --> 00:08:10,080
Whenever you have a mathematical operator, each tries to compute the individual values of these operate.

114
00:08:10,100 --> 00:08:13,040
So it is going to say, OK, the letter is D, which is.

115
00:08:14,950 --> 00:08:15,550
68.

116
00:08:16,310 --> 00:08:20,290
And is this greater than equal to a which is actually 65?

117
00:08:21,010 --> 00:08:24,340
And is it less than equal than the previous?

118
00:08:25,800 --> 00:08:28,410
So it is less than equal to 90.

119
00:08:28,680 --> 00:08:33,270
That is the value of the item or does it lie in the range of.

120
00:08:34,720 --> 00:08:35,180
Molly?

121
00:08:35,230 --> 00:08:38,980
OK, so something like this, does it lie in between these values?

122
00:08:39,370 --> 00:08:41,200
Then of course, it is going to be later.

123
00:08:41,830 --> 00:08:47,680
Does it lie in the ASCII values of the digits because these are also continuous values, maybe from

124
00:08:47,680 --> 00:08:49,240
40 to 49, something like that.

125
00:08:49,900 --> 00:08:54,210
If it lies in these in this range, then it is actually a digital gift.

126
00:08:54,670 --> 00:09:03,070
I have to use the logical landed on the code has been wrote and illustrated underscored now, so identify

127
00:09:03,070 --> 00:09:03,400
later.

128
00:09:03,970 --> 00:09:05,560
It's a give way.

129
00:09:06,010 --> 00:09:07,120
It says it is related.

130
00:09:07,570 --> 00:09:09,010
I give it.

131
00:09:09,460 --> 00:09:10,600
It is a special symbol.

132
00:09:11,050 --> 00:09:16,870
I just think and it's a white space in that space, white space.

133
00:09:17,380 --> 00:09:20,020
If I give it, it's actually a digital gift.

134
00:09:20,680 --> 00:09:28,780
That means our code is working as expected, and that was the importance of using seen target because

135
00:09:28,780 --> 00:09:32,830
otherwise we could not have solved this problem using the same policy.

136
00:09:33,890 --> 00:09:35,310
So that's all for this video.

137
00:09:35,330 --> 00:09:35,870
Thank you.

1
00:00:01,400 --> 00:00:07,580
Hi, everyone, so we'll continue our discussion on these style strength, also known as character,

2
00:00:07,580 --> 00:00:08,060
is OK.

3
00:00:08,660 --> 00:00:15,290
So so far, what we have seen is how to initialize the eddy, how to read an attack, and in initialization,

4
00:00:15,290 --> 00:00:16,820
we talked about two ways.

5
00:00:17,150 --> 00:00:18,680
One is in which we.

6
00:00:21,140 --> 00:00:26,480
Even a list of characters, and in another way, we did see that we can initialize a string using a

7
00:00:26,480 --> 00:00:27,200
string literal.

8
00:00:27,860 --> 00:00:35,960
And we also see how to initialize or how to assign a value to a string Wunderlist created by taking

9
00:00:35,960 --> 00:00:40,660
in one more thing we will do in this example and we are going to take.

10
00:00:41,930 --> 00:00:45,620
Sometimes people do make this mistake.

11
00:00:45,650 --> 00:00:49,230
They try to assign a string literal to correct that.

12
00:00:49,340 --> 00:00:52,670
OK, so maybe I'll call it as string.

13
00:00:53,670 --> 00:00:54,630
Functions.

14
00:00:57,700 --> 00:01:04,490
Now let's we have got a battery on it, can hold up 200 letters, including the now look at that.

15
00:01:05,300 --> 00:01:10,970
Now let me try to put something inside it and I say name equals plastic.

16
00:01:12,490 --> 00:01:16,450
If I build this cold, I'm going to get an error rate.

17
00:01:17,120 --> 00:01:21,250
So it is not as high and we cannot assign any value.

18
00:01:22,250 --> 00:01:22,700
Do.

19
00:01:23,900 --> 00:01:30,120
To the Iranian mucosa, the name is actually an address of dairy, and this is a read only constant.

20
00:01:30,140 --> 00:01:36,210
We cannot put something in the address of dairy, OK, so this is something we cannot do, right?

21
00:01:36,740 --> 00:01:38,270
Then how do we update the city?

22
00:01:38,280 --> 00:01:45,390
So one way is that we read foot each of the index and then we try to put some values inside it.

23
00:01:45,410 --> 00:01:54,110
So this is name on this that is indexed like regulatory and it has a zero location, one location and

24
00:01:54,110 --> 00:02:00,380
up to two times up to 99 locations because besides under it, OK, so if I can put something here,

25
00:02:00,390 --> 00:02:03,830
OK, the name is actually the address of that.

26
00:02:03,840 --> 00:02:06,110
It is, it denotes the starting point.

27
00:02:06,650 --> 00:02:10,030
OK, maybe this addresses some one zero eight zero.

28
00:02:10,170 --> 00:02:13,490
Name is a point that points to the beginning of the city.

29
00:02:14,900 --> 00:02:17,960
Now, if I put it to it, it might.

30
00:02:19,220 --> 00:02:24,320
I'm sorry if I would correct that if I can add that I can the name of zero.

31
00:02:25,750 --> 00:02:33,790
This is equal to be made if I want to write my entire name or if I want to update some of the places

32
00:02:33,790 --> 00:02:39,540
in the city, I have to do it by accessing the index as a boys.

33
00:02:39,970 --> 00:02:42,780
I got to know about some constraint.

34
00:02:42,970 --> 00:02:43,270
OK?

35
00:02:43,390 --> 00:02:49,150
And maybe I'm just terminating it by putting another character writing in a less important so that if

36
00:02:49,150 --> 00:02:57,100
you do see your name, you stop printing after print after the first index.

37
00:02:57,100 --> 00:02:57,340
Okay?

38
00:02:57,700 --> 00:02:59,800
OK, so this is actually important.

39
00:03:00,670 --> 00:03:02,980
Now if I run this code?

40
00:03:04,370 --> 00:03:13,140
I can say large, large, the string functions, it does print beer, but just correct it as opposed

41
00:03:13,140 --> 00:03:19,310
to turn off putting, but I want to put all of the letters of my name into this area.

42
00:03:20,600 --> 00:03:23,360
It would be either you will put a loop.

43
00:03:23,590 --> 00:03:27,500
OK, but this could be an operation which could be very frequent.

44
00:03:27,500 --> 00:03:31,580
Or you might be doing this a lot of times and hence what?

45
00:03:33,340 --> 00:03:40,130
Do we have, as we do, have a header file which provides us with certain functions, like if we want

46
00:03:40,130 --> 00:03:48,140
to copy a string literal into a character night, there is a function which is known as string copy

47
00:03:48,140 --> 00:03:49,310
SDLC b why?

48
00:03:50,050 --> 00:03:53,780
And we tell the destination where we want to put something.

49
00:03:54,320 --> 00:03:57,550
And here we tell the source from where we will read something.

50
00:03:57,590 --> 00:03:57,900
OK?

51
00:03:58,490 --> 00:04:02,030
The source in this case is a read-only constant, which is pretty weak.

52
00:04:02,570 --> 00:04:04,160
And what is the destination?

53
00:04:04,170 --> 00:04:05,740
The destination is the name Adi.

54
00:04:05,930 --> 00:04:08,370
OK, so we are putting the letters of critique.

55
00:04:08,420 --> 00:04:10,960
We are copying it into the character.

56
00:04:11,330 --> 00:04:18,590
OK, now if I bring my code and if I try to show you the output, now you're going to read it is working

57
00:04:18,740 --> 00:04:19,730
as expected, OK?

58
00:04:19,970 --> 00:04:25,700
So instead of being name equal to critique which is an invalid operation, you would be doing string

59
00:04:25,700 --> 00:04:30,980
copy name, followed by the value followed by the string literal that you want to copy.

60
00:04:31,520 --> 00:04:35,750
Or maybe you can have space separated string letters as well.

61
00:04:36,260 --> 00:04:37,290
That is also fine.

62
00:04:37,310 --> 00:04:39,740
That will also work as expected it.

63
00:04:41,670 --> 00:04:44,640
Now you're going to it is working as expected, right?

64
00:04:44,970 --> 00:04:52,950
That is another way of putting values inside the character study using an inbuilt function from the

65
00:04:52,950 --> 00:04:56,580
C string library and the function name is string copy.

66
00:04:57,240 --> 00:05:03,960
And what more we do we have we do have some of the functions like string concatenation, string length.

67
00:05:05,730 --> 00:05:08,970
Let me show you the library still C Street.

68
00:05:09,010 --> 00:05:13,650
OK, so see, String has functions for copying that we have seen a function string copy.

69
00:05:15,180 --> 00:05:19,760
It also have functions for doing concatenation, for example SDLC 80.

70
00:05:20,010 --> 00:05:24,120
Let's look at an example of doing the concatenation OK.

71
00:05:24,510 --> 00:05:28,170
Maybe I can say God and I can see Greek.

72
00:05:29,620 --> 00:05:32,620
And I say, OK, string.

73
00:05:34,530 --> 00:05:35,310
And copy.

74
00:05:35,340 --> 00:05:42,750
Maybe I am going to initialize this with I and then maybe I'm going to add Bing.

75
00:05:44,950 --> 00:05:53,050
The function is string S.T.A.R.T., OK, now I'm going to say, OK, you add something to this string.

76
00:05:53,350 --> 00:05:53,950
How are you?

77
00:05:54,880 --> 00:05:59,410
Maybe I want to concatenate this string I followed by how so?

78
00:05:59,440 --> 00:06:05,020
Maybe I can see the old grade and then and.

79
00:06:08,540 --> 00:06:10,550
So this should be like this.

80
00:06:12,360 --> 00:06:13,740
And now we can run this code.

81
00:06:15,530 --> 00:06:16,020
So you can see.

82
00:06:16,040 --> 00:06:17,060
Hi, how are you?

83
00:06:17,390 --> 00:06:23,780
The concatenation is working as expected with, hey, you are spending this spring our if you'll give

84
00:06:23,780 --> 00:06:28,100
us base here or here, and that would also reflect, right?

85
00:06:30,380 --> 00:06:31,490
So, hi, how are you?

86
00:06:31,520 --> 00:06:34,570
So this is an example of a string and garden nation.

87
00:06:35,030 --> 00:06:38,780
Similarly, you have functions for doing string comparison.

88
00:06:39,950 --> 00:06:42,770
For example, this can compare it with strengths.

89
00:06:43,850 --> 00:06:50,330
There are functions for searching inside a string, for example, you want to locate the first occurrence

90
00:06:50,330 --> 00:06:56,390
of a character in a string, you can use this method or if you want to locate a substring, you can

91
00:06:56,390 --> 00:06:59,030
use this method to let us look at the documentation.

92
00:06:59,510 --> 00:07:01,480
How to use one of these methods?

93
00:07:01,490 --> 00:07:01,730
OK.

94
00:07:06,680 --> 00:07:14,000
OK, so I'm going to give you a demo of two functions, one is the structure function on the other is

95
00:07:14,000 --> 00:07:15,440
a string compare function, OK?

96
00:07:15,980 --> 00:07:17,960
Let us look at this function.

97
00:07:18,620 --> 00:07:25,550
So it basically finds a second string inside the first string on it returns a null pointer if string

98
00:07:25,550 --> 00:07:28,010
blue is not a part of the first string, OK?

99
00:07:28,640 --> 00:07:31,640
And let us look at an example.

100
00:07:31,880 --> 00:07:33,710
Maybe I have.

101
00:07:35,650 --> 00:07:40,120
Let me open up a new program and I can say a strange function.

102
00:07:41,290 --> 00:07:42,310
These string functions.

103
00:07:45,590 --> 00:07:53,330
Recover some gold, and maybe I can initialize us, and it's got something intense.

104
00:07:55,040 --> 00:07:57,050
And let's say the sentences.

105
00:07:58,840 --> 00:08:00,370
I love reading books.

106
00:08:04,600 --> 00:08:05,850
On, let's say.

107
00:08:07,180 --> 00:08:07,660
Thanks.

108
00:08:09,050 --> 00:08:15,520
I suppose I want to find out a word which I will take as input, so I will say, OK, I I will agree

109
00:08:15,520 --> 00:08:20,350
on word that can be as big as the sentence I will take and put the word.

110
00:08:21,100 --> 00:08:25,060
And we will try to search for the word inside the sentence.

111
00:08:25,390 --> 00:08:26,260
I can see.

112
00:08:28,730 --> 00:08:31,920
SDR is the search for the word.

113
00:08:31,940 --> 00:08:33,920
Let's look at the documentation, right?

114
00:08:34,640 --> 00:08:35,120
So.

115
00:08:36,960 --> 00:08:45,350
It does, except the sentence and award, so the sentence would be sentence and the word would be OK.

116
00:08:45,780 --> 00:08:49,500
Maybe I'll will just output what this is going to return.

117
00:08:50,720 --> 00:08:54,530
And not like these string functions to.

118
00:08:56,120 --> 00:08:59,110
So it is waiting for the word, so maybe the world is book.

119
00:09:00,460 --> 00:09:07,930
So what it does return, it does return a to the location from where the doing his phone look.

120
00:09:07,960 --> 00:09:10,150
So I'll just tell you why this output?

121
00:09:10,450 --> 00:09:11,510
Why did we get this out?

122
00:09:11,830 --> 00:09:13,150
It actually returned us.

123
00:09:14,390 --> 00:09:22,010
Something of the type God has done, which points to this location, OK, and when we l-cio, OK, you

124
00:09:22,010 --> 00:09:25,200
want the printer corrected, it would start from this index.

125
00:09:25,460 --> 00:09:27,590
OK, to how old gets an orchid?

126
00:09:27,620 --> 00:09:33,140
There is a list of collectors which starts from this location, so this guy to start is the address

127
00:09:33,140 --> 00:09:39,020
of this location, and hence it could found the location and it prints everything till the end.

128
00:09:39,020 --> 00:09:39,440
OK?

129
00:09:39,770 --> 00:09:46,890
So if you want to make this as a Boolean, you can say maybe gonna start out whatever.

130
00:09:46,910 --> 00:09:47,810
Is this output?

131
00:09:48,820 --> 00:09:55,690
You're starting this in in a pointed video and you're checking if this output is equal to null, that

132
00:09:55,690 --> 00:09:56,860
means you're going to see out.

133
00:09:57,640 --> 00:09:58,960
This world is not on.

134
00:10:01,460 --> 00:10:01,760
OK.

135
00:10:02,340 --> 00:10:02,780
And.

136
00:10:05,090 --> 00:10:09,170
As you can see, this world is found.

137
00:10:09,460 --> 00:10:11,360
So maybe what is?

138
00:10:13,390 --> 00:10:13,800
Found.

139
00:10:14,980 --> 00:10:18,130
And yeah, that's how we are going to do it.

140
00:10:22,030 --> 00:10:23,290
Maybe I can say.

141
00:10:26,310 --> 00:10:31,230
Book is book is found if I see books.

142
00:10:31,890 --> 00:10:34,320
Books is not phone book, so this is not dead.

143
00:10:34,830 --> 00:10:42,180
And even if I have a substring like ITN, right, this would be found to because it is part of the word

144
00:10:42,180 --> 00:10:42,660
science.

145
00:10:43,320 --> 00:10:46,560
And it would look for a substring inside a string.

146
00:10:46,560 --> 00:10:49,950
Okay, so Ian is a substring, and hence it is so great.

147
00:10:50,700 --> 00:10:58,630
So I hope you also understood this concept and an added function that we would like to discuss is string

148
00:10:58,630 --> 00:11:00,600
compare that we will do in the next radio.

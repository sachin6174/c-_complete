1
00:00:02,180 --> 00:00:07,010
Everyone in this lecture will talk about possible defense using reference variables.

2
00:00:07,040 --> 00:00:14,660
OK, so what I'm going to do, I'm going to show you one example I want to create a function void and

3
00:00:14,690 --> 00:00:20,230
that will, let's say, applied x on my income.

4
00:00:20,240 --> 00:00:21,220
Let's end and go.

5
00:00:21,260 --> 00:00:27,170
I'm getting some income and I want to apply a 10 percent tax on my income and I want to see what is

6
00:00:27,170 --> 00:00:30,230
the income that I will get after applying this particular tax, OK?

7
00:00:30,820 --> 00:00:41,240
So this function is going to change my income by applying a 10 percent tax so I can say one minus 0.1

8
00:00:41,540 --> 00:00:45,200
that is basically 0.9 into my income.

9
00:00:45,470 --> 00:00:46,230
OK, OK.

10
00:00:46,290 --> 00:00:49,940
Maybe I can say of lowered that percentage is.

11
00:00:51,610 --> 00:00:56,210
So I have a little 10 percent x one minus x in low income.

12
00:00:56,260 --> 00:00:56,590
OK.

13
00:00:56,920 --> 00:00:58,150
All I can say.

14
00:00:58,720 --> 00:01:01,900
Income minus income and do X.

15
00:01:02,500 --> 00:01:04,600
So I subtract something from my income.

16
00:01:05,050 --> 00:01:09,250
I pay some tax and that takes taxes 10 percent of my income.

17
00:01:10,030 --> 00:01:13,190
And this income should ideally change.

18
00:01:13,190 --> 00:01:14,950
Okay, so let's say we have this function.

19
00:01:14,950 --> 00:01:24,700
So maybe I take an income as a input from the user is OK, let us apply tax on this particular income,

20
00:01:25,270 --> 00:01:28,630
and I pass the income as a parameter to this function.

21
00:01:29,110 --> 00:01:32,800
And if I do see out income, what I should expect here.

22
00:01:32,830 --> 00:01:34,330
OK, what should I expected?

23
00:01:34,330 --> 00:01:37,380
Should my income change or will not change?

24
00:01:37,390 --> 00:01:37,580
Okay.

25
00:01:38,120 --> 00:01:40,930
What we are doing here is we are doing buyers by value.

26
00:01:41,950 --> 00:01:44,740
So I will tell you, what is this concept?

27
00:01:45,550 --> 00:01:53,140
So as better friends, we are doing large slash buys, but often during reference variables to my income

28
00:01:53,140 --> 00:01:54,040
is under peace.

29
00:01:54,490 --> 00:01:57,430
And after playing Dexter, it is still giving me OK.

30
00:01:57,700 --> 00:01:59,020
And what is the problem here?

31
00:01:59,350 --> 00:02:03,850
The problem here is we are actually doing fast by reference, OK?

32
00:02:04,360 --> 00:02:06,280
So also replaced by value.

33
00:02:07,680 --> 00:02:12,300
What happened is when you're digging in, put your income, it is stored inside a bucket called income,

34
00:02:13,170 --> 00:02:20,160
and when you're finding there's income or dysfunction here, you're creating another bucket that also

35
00:02:20,160 --> 00:02:21,180
has an income.

36
00:02:21,930 --> 00:02:22,230
OK.

37
00:02:22,680 --> 00:02:24,780
And here this value is copied.

38
00:02:25,260 --> 00:02:28,770
And when you apply this formula, this income is changed.

39
00:02:28,770 --> 00:02:29,880
It becomes 90.

40
00:02:30,630 --> 00:02:35,460
And in the mean, after calling this function, when you try to print income, you're actually printing

41
00:02:35,460 --> 00:02:36,270
this income, OK?

42
00:02:36,640 --> 00:02:44,730
So basically, there are two copies, OK, and this copy is there in the call stack of applied tax.

43
00:02:46,730 --> 00:02:51,560
And this copy is there in the golf star of Mean in the main.

44
00:02:52,070 --> 00:02:53,690
The actual copy is not changing.

45
00:02:53,690 --> 00:03:00,260
You're changing the duplicate, you're changing the duplicate what I want instead of creating two copies,

46
00:03:00,680 --> 00:03:04,370
I should only have one copy of income and I should get changed.

47
00:03:04,670 --> 00:03:12,230
OK, so what we can do in that case is we can say we should pass this by reference so I can write and

48
00:03:12,230 --> 00:03:17,960
and and to know what is going to happen is we we have a variable called in come here.

49
00:03:19,560 --> 00:03:26,640
We also have a different variable income in this particular function, applied tax that is another name

50
00:03:26,640 --> 00:03:27,790
for this particular variable.

51
00:03:27,810 --> 00:03:28,040
OK.

52
00:03:28,770 --> 00:03:29,550
It has.

53
00:03:30,810 --> 00:03:33,300
A different school doesn't come as a different school.

54
00:03:33,330 --> 00:03:40,740
It exists inside dysfunction, but the memory location that is there, it is shared with this particular

55
00:03:40,740 --> 00:03:41,140
function.

56
00:03:41,160 --> 00:03:46,580
OK, so if I know change and come here, then it is going to change, then come here as well.

57
00:03:46,600 --> 00:03:48,690
So this will become led to Nairobi.

58
00:03:49,110 --> 00:03:52,170
And let us see how this is going to work.

59
00:03:53,350 --> 00:03:56,200
So if I build a code and if I run this.

60
00:03:57,910 --> 00:04:04,750
And if I give good, you can my income after applying tax is rupees 90, that means we are working on

61
00:04:04,750 --> 00:04:06,220
the same copy of the income.

62
00:04:06,220 --> 00:04:11,440
So this is known as parsed by reference using reference variables.

63
00:04:12,040 --> 00:04:17,840
And this is the most important use case of a reference variable that you will find across many functions.

64
00:04:17,860 --> 00:04:18,160
OK.

65
00:04:18,640 --> 00:04:22,750
And maybe if you don't want to call it as income, you can call it as money.

66
00:04:23,260 --> 00:04:26,680
And here you can call it as money equals to money minus.

67
00:04:28,330 --> 00:04:29,380
Money in tax.

68
00:04:30,400 --> 00:04:38,860
OK, so let's build a code and let's it underscored again, so we are going to get the same output.

69
00:04:39,190 --> 00:04:41,530
And yes, it is working as expected.

70
00:04:42,070 --> 00:04:43,570
Now what did we do?

71
00:04:43,600 --> 00:04:45,250
We had this rocket and come.

72
00:04:46,960 --> 00:04:51,230
So initially, the program started from women, so the main goal stock was there.

73
00:04:51,770 --> 00:04:54,440
Then we made a function called Applied X.

74
00:04:54,590 --> 00:05:00,280
So we added one more function in the file stack that created a different variable money.

75
00:05:00,290 --> 00:05:08,480
So the name money exists inside this function, and it is a different variable for this income.

76
00:05:08,480 --> 00:05:10,100
So this income gets a name money.

77
00:05:10,700 --> 00:05:15,260
Then we do some calculation we updated with 100 minus and it should be 90.

78
00:05:15,740 --> 00:05:17,120
And then this call is over.

79
00:05:17,750 --> 00:05:19,860
And this name is also destroyed.

80
00:05:19,880 --> 00:05:23,390
And finally, when you print income, you will still see the output name.

81
00:05:23,520 --> 00:05:27,740
But if you try to see old money here, you will not get any output, right?

82
00:05:28,610 --> 00:05:30,300
Because this variable does not exist.

83
00:05:30,320 --> 00:05:31,700
You will get a compilation error.

84
00:05:31,760 --> 00:05:35,390
This money only exists when this function is called OK.

85
00:05:36,440 --> 00:05:40,140
So this is the whole idea of teaching you reference variables.

86
00:05:40,160 --> 00:05:43,130
I hope this is clear, and that's all.

1
00:00:02,160 --> 00:00:05,490
Everyone in this lecture will talk about reference variables.

2
00:00:05,610 --> 00:00:13,920
OK, so this is one last topic that I want to discuss in this particular section on the reference video,

3
00:00:13,920 --> 00:00:22,250
but this is a very powerful concept in C++, and it will allow us to pass objects by different OK.

4
00:00:23,100 --> 00:00:30,180
Using this, we can pass objects by reference or some other functions very easily.

5
00:00:30,990 --> 00:00:32,970
I will tell you what is this?

6
00:00:33,600 --> 00:00:34,440
What does this mean?

7
00:00:34,440 --> 00:00:36,300
OK, so the pass objects.

8
00:00:36,300 --> 00:00:40,500
But if we had to, this one is us objects.

9
00:00:41,670 --> 00:00:45,930
One way uses pointers and another way uses reference variables.

10
00:00:45,930 --> 00:00:46,200
OK?

11
00:00:46,620 --> 00:00:49,360
These two concepts are different concepts.

12
00:00:49,380 --> 00:00:51,150
They're not exactly related.

13
00:00:51,360 --> 00:00:56,370
OK, but it is important we understand the difference between these two.

14
00:00:56,790 --> 00:01:02,900
The first let us focus upon this concept biasing object by reference using a reference variable.

15
00:01:03,070 --> 00:01:11,550
OK, so now let me tell you that we will use this object around and we have already seen that this and.

16
00:01:13,340 --> 00:01:16,160
Can be used in multiple places.

17
00:01:16,200 --> 00:01:19,760
So one is being a bit resigned, for example, five entry.

18
00:01:20,120 --> 00:01:24,050
And there is another address of operator and of some bucket.

19
00:01:24,830 --> 00:01:26,130
Give us the address.

20
00:01:26,150 --> 00:01:27,210
That is what we have seen.

21
00:01:27,560 --> 00:01:33,610
And the third you case that we are going to look at, it is very initializing a reference variable.

22
00:01:33,630 --> 00:01:33,860
OK?

23
00:01:34,580 --> 00:01:39,740
So now let me tell you, for example, if you create a bucket, let's say index equal to 10.

24
00:01:41,070 --> 00:01:42,450
And then you do something like.

25
00:01:42,660 --> 00:01:44,070
And why?

26
00:01:45,290 --> 00:01:46,160
Equals to X.

27
00:01:47,270 --> 00:01:52,940
In this case, what happened is X is a bucket which contains the Wellington unwise, another bucket

28
00:01:52,940 --> 00:01:54,610
which contains the Wellington, OK.

29
00:01:55,070 --> 00:02:02,390
But instead, if you do something like this in NY equal to this, then let me tell you what is going

30
00:02:02,390 --> 00:02:02,900
to happen.

31
00:02:03,350 --> 00:02:07,790
If you ain't aren't very cold x, then y will not be a new bucket.

32
00:02:08,420 --> 00:02:11,890
That means via index, they are the same bucket.

33
00:02:11,910 --> 00:02:15,230
Okay, for example, you have a name.

34
00:02:15,230 --> 00:02:24,470
OK, so let's say you have some name either home and your mother also gives you another name.

35
00:02:24,770 --> 00:02:27,310
Maybe your friends call you with your nickname.

36
00:02:27,320 --> 00:02:34,040
OK, if I call your name or if I call your nickname, that means I'm talking about the same person.

37
00:02:34,310 --> 00:02:37,850
Similarly, X and Y are not two different buckets.

38
00:02:37,940 --> 00:02:39,950
They are the name for the same memory.

39
00:02:39,950 --> 00:02:49,430
So basically reference variables create another name or create an alias for the same object.

40
00:02:49,670 --> 00:02:49,960
OK.

41
00:02:50,270 --> 00:02:52,100
For the same object.

42
00:02:52,760 --> 00:02:56,870
And when you're creating a different variable, they must be initialized.

43
00:02:56,960 --> 00:02:57,320
OK.

44
00:02:57,590 --> 00:02:59,510
You cannot do something like this.

45
00:03:00,980 --> 00:03:03,500
You cannot do something like this in any way.

46
00:03:03,770 --> 00:03:05,420
And I will do the initialization.

47
00:03:05,690 --> 00:03:06,740
No, this is not allowed.

48
00:03:07,100 --> 00:03:10,520
Whenever you are creating this reference variable, there must be initialized.

49
00:03:10,520 --> 00:03:14,810
So in this case, we can see this VI is a reference variable.

50
00:03:14,810 --> 00:03:18,680
It refers to the value of OK, it doesn't point the way it is.

51
00:03:18,980 --> 00:03:19,540
It is X.

52
00:03:19,550 --> 00:03:21,420
OK, so why is X and X's way?

53
00:03:22,070 --> 00:03:26,990
So let me try to show you with the help of a simple program.

54
00:03:29,410 --> 00:03:34,690
So let us do one thing, we have a bucket that is done, we create a different variable by.

55
00:03:36,350 --> 00:03:44,660
And political do x, then if I do viable a plus and if I lose, see Old X and and if I do see out Y

56
00:03:44,660 --> 00:03:50,900
and then the world output, you should expect, we should expect an output of 11 because both of them

57
00:03:50,900 --> 00:03:55,010
are pointing to the odd the same, but they're not pointing to each other.

58
00:03:55,520 --> 00:03:58,110
Both X and Y are the name for the same bucket.

59
00:03:58,130 --> 00:04:02,440
So this is this is why this was done, then I do vibe less plus.

60
00:04:02,450 --> 00:04:03,740
So this becomes irrelevant.

61
00:04:04,190 --> 00:04:08,380
And if I print X and Y, I get an output as eleven.

62
00:04:09,020 --> 00:04:10,190
The let me show it to you.

63
00:04:17,350 --> 00:04:20,830
OK, let me just save this file with the name of.

64
00:04:22,610 --> 00:04:23,990
Reference Tazi BP.

65
00:04:25,180 --> 00:04:26,320
The slash.

66
00:04:28,850 --> 00:04:29,630
Reference.

67
00:04:34,190 --> 00:04:36,200
Now you going to be are getting this output of a living.

68
00:04:36,620 --> 00:04:43,570
But suppose if I do x plus plus here, then both X and Y will change.

69
00:04:43,580 --> 00:04:50,630
OK, so either you operate X Audio Broadway, both are going to change and it will look good first and

70
00:04:50,630 --> 00:04:51,950
you can see the values are now.

71
00:04:52,250 --> 00:04:56,120
Well, I hope you understood this concept of reference variables.

72
00:04:56,120 --> 00:04:59,090
In the next lecture, we will talk about possible difference.

1
00:00:02,010 --> 00:00:09,330
So in this lecture, we're going to talk about one more operator that is known as copy assignment operator.

2
00:00:09,330 --> 00:00:12,240
So we have learned about copy contractor and.

3
00:00:13,280 --> 00:00:20,060
We learn that sometimes we may need to create a deep copy as well, so similar to copy, but we have

4
00:00:20,060 --> 00:00:27,160
a copy assignment operator which can be used to initialize one object from another.

5
00:00:27,170 --> 00:00:28,550
Maybe you have some object.

6
00:00:29,600 --> 00:00:34,670
And later on, somewhere in the code you wanted to object, one should be called to object to.

7
00:00:35,270 --> 00:00:35,600
OK.

8
00:00:35,930 --> 00:00:38,630
In this case, the object is already constructed.

9
00:00:38,630 --> 00:00:40,550
OK, so the contractor was already called.

10
00:00:41,000 --> 00:00:48,260
You can only call contractor one time, and that can be either the default contractor or the parameterized

11
00:00:48,260 --> 00:00:49,880
contractor or the copy contractor.

12
00:00:50,450 --> 00:00:55,010
So now you want to make a copy, so here you will not cop killer copy contractor.

13
00:00:55,010 --> 00:00:59,900
Here you will call a special method, which is known as copy assignment operator, and this operator

14
00:00:59,900 --> 00:01:07,790
will tell how object one should be initialized from object, what all values should be copied and let

15
00:01:07,790 --> 00:01:09,050
us try to see this.

16
00:01:09,860 --> 00:01:11,340
This method already exists.

17
00:01:11,340 --> 00:01:18,860
So if I say I want to say, let's say I've created an old camera here, if you look carefully.

18
00:01:22,230 --> 00:01:28,440
So if I just don't do the initialization at this point, so the contract has already been called OK,

19
00:01:29,520 --> 00:01:35,040
and maybe I want to say something like let me just the man told this court.

20
00:01:35,610 --> 00:01:40,770
I want to say after some time that old camera should be equal to camera.

21
00:01:41,380 --> 00:01:46,170
So at this point, a copy assignment operator function will be called.

22
00:01:47,380 --> 00:01:50,100
So we need to see what does this copy assignment operator?

23
00:01:50,730 --> 00:01:53,790
And let us dive into that as well.

24
00:01:54,540 --> 00:01:55,290
So.

25
00:01:57,760 --> 00:02:03,370
So we have we are calling the function Gamera authorities, and we are calling the function old camera

26
00:02:03,370 --> 00:02:05,540
on our shoulders here.

27
00:02:05,590 --> 00:02:11,830
This copy assignment operator is going to get called on with one more thing I'm going to do, but let

28
00:02:11,830 --> 00:02:13,420
me just show you the output first.

29
00:02:14,690 --> 00:02:15,170
So.

30
00:02:18,670 --> 00:02:21,820
Let us build a cold and now let me show you the output.

31
00:02:23,070 --> 00:02:30,090
So you can see it is inside the default constructor that we have printed and then this is object one.

32
00:02:30,360 --> 00:02:31,650
And this is object two.

33
00:02:32,040 --> 00:02:33,360
And they both are the same.

34
00:02:33,390 --> 00:02:35,550
So let us try to change one of them.

35
00:02:36,060 --> 00:02:44,010
So again, the old camera not set name and I do GoPro eight, OK, and it's the old something like this.

36
00:02:45,260 --> 00:02:55,640
And if I build a gold now on liquid on it, you can see the name is changed for both the cameras.

37
00:02:55,850 --> 00:03:02,660
This is happening way not because of propaganda, but because of sloppy assignment operator, which

38
00:03:02,660 --> 00:03:06,020
also creates a shallow copy.

39
00:03:06,030 --> 00:03:10,450
Okay, so that means we need to define our own copy assignment operator.

40
00:03:10,460 --> 00:03:11,030
So.

41
00:03:12,200 --> 00:03:18,170
The way to define it is like this we have void uprated equal to.

42
00:03:18,710 --> 00:03:26,450
And here we give the product, and maybe here we're going to see out inside Bobby assignment.

43
00:03:29,380 --> 00:03:29,980
Well, the good.

44
00:03:31,040 --> 00:03:32,330
And let me show you.

45
00:03:34,250 --> 00:03:35,570
Oh, okay.

46
00:03:38,240 --> 00:03:38,410
Yes.

47
00:03:38,510 --> 00:03:46,100
So this is giving us a segmentation fault because we are doing certain him on this, it is right now

48
00:03:46,100 --> 00:03:50,530
not created this that is not created because of.

49
00:03:51,580 --> 00:03:52,000
Yes.

50
00:03:52,990 --> 00:03:56,530
This is not going to work because that is not yet created.

51
00:03:56,740 --> 00:04:01,000
So what we will, I'll just go up, it is called and I will be started.

52
00:04:01,840 --> 00:04:04,210
This is going to override the default.

53
00:04:05,230 --> 00:04:09,400
Well, assignment operator and this court is going to create a deep copy.

54
00:04:10,560 --> 00:04:11,400
So let me show you.

55
00:04:13,570 --> 00:04:19,600
Now, if I see the name, here it is GoPro Hero nine under his GoPro, it all.

56
00:04:20,170 --> 00:04:21,790
Now this is working because.

57
00:04:23,090 --> 00:04:27,260
What would it be actually write the logic for creating a deep copy?

58
00:04:28,610 --> 00:04:32,090
Inside lobby assignment operator, OK.

59
00:04:32,690 --> 00:04:36,510
This is the same day that you have to remember, this is a return type of the metal.

60
00:04:36,530 --> 00:04:37,820
It doesn't return anything.

61
00:04:38,180 --> 00:04:43,550
Operator is a key word, and equal basically tells us that we are overloading the assignment operator

62
00:04:43,550 --> 00:04:50,500
for the product object, and we will get a product for which we are copying into into our current product.

63
00:04:50,510 --> 00:04:50,780
OK?

64
00:04:51,290 --> 00:04:53,270
When you're making this phone call here.

65
00:04:53,690 --> 00:05:02,360
So this is basically you're doing old camera and there is a method which is for equality.

66
00:05:02,370 --> 00:05:03,860
So this method is nothing but equal.

67
00:05:04,310 --> 00:05:08,270
And this camera object is actually parsed as a parameter.

68
00:05:08,480 --> 00:05:12,260
OK, so this is what is happening when you're doing this thing.

69
00:05:12,530 --> 00:05:17,120
We are actually making a call to the copy assignment operator that we have just written.

70
00:05:17,660 --> 00:05:21,950
So I hope the concept of copies and rent operator is clear.

71
00:05:22,430 --> 00:05:28,610
And sometimes we may need to create a deep copy on for the idea of to write the code for the obvious

72
00:05:28,610 --> 00:05:31,180
and rent operator and copy the device.

73
00:05:31,190 --> 00:05:37,100
Both of them will create a yellow copy because this is all we are creating a deep copy by initializing

74
00:05:37,100 --> 00:05:39,650
or numeric and all the values are same.

75
00:05:39,680 --> 00:05:42,370
The array addresses different and the memory is different.

76
00:05:42,380 --> 00:05:42,650
OK?

77
00:05:42,710 --> 00:05:45,140
So that's the whole point of making a copy.

78
00:05:46,550 --> 00:05:48,490
All right, so that's all for.

1
00:00:01,620 --> 00:00:08,610
I certainly know we have talked about object initialization using constructors, and we have seen how

2
00:00:08,610 --> 00:00:09,210
to construct.

3
00:00:09,960 --> 00:00:11,070
I'm a trace contractor.

4
00:00:11,520 --> 00:00:14,580
And you also talked about the concept of contractor overloading.

5
00:00:14,580 --> 00:00:18,120
That means overloading basically means multiple functions with the same name.

6
00:00:18,540 --> 00:00:22,110
So when we are defining multiple contractors, that is also a kind of a function.

7
00:00:22,120 --> 00:00:26,120
Overloading and dysfunctional overloading is known as constructor overloading.

8
00:00:26,520 --> 00:00:31,080
So in this lecture, we'll talk about one more type of constructor, which is known as copy constructor.

9
00:00:31,560 --> 00:00:33,420
And what does this contract going to do?

10
00:00:33,420 --> 00:00:36,060
It is going to create a copy of a given object, OK?

11
00:00:36,540 --> 00:00:45,120
So that means we can initialize one more object by sending the current object and this object can be

12
00:00:45,360 --> 00:00:45,760
created.

13
00:00:45,780 --> 00:00:46,020
OK.

14
00:00:46,320 --> 00:00:48,840
So let me let me show you in the form of code.

15
00:00:49,110 --> 00:00:56,550
So if I have, let's say, a camera and I want to create one more product, which is again a camera,

16
00:00:57,000 --> 00:01:01,370
and maybe I want to initialize it using using my first camera.

17
00:01:01,500 --> 00:01:04,380
And maybe let me just call it as second camera, OK?

18
00:01:04,800 --> 00:01:05,700
Or maybe.

19
00:01:07,710 --> 00:01:08,820
Maybe a webcam.

20
00:01:09,060 --> 00:01:09,360
OK.

21
00:01:09,840 --> 00:01:16,950
And I want to initialize it using my camera object to what I can do, I can still get it.

22
00:01:16,970 --> 00:01:20,010
Can this object and construct a webcam?

23
00:01:20,010 --> 00:01:23,190
So if I say, OK, camera dart.

24
00:01:26,590 --> 00:01:32,380
OK, so maybe what we can do, we can make one more function, it will show the details of that camera

25
00:01:32,390 --> 00:01:37,690
because whatever functions your details that is going to display all the details of the cameras, we

26
00:01:37,690 --> 00:01:39,850
are going, I'm going to call this method.

27
00:01:40,180 --> 00:01:45,940
So show details, but camera and maybe webcam, not show details.

28
00:01:46,540 --> 00:01:49,180
And I'm going to show the details of this one as well.

29
00:01:49,780 --> 00:01:52,420
Now, if I run this code, you can see.

30
00:01:55,440 --> 00:01:55,770
OK.

31
00:01:56,180 --> 00:02:01,500
Let let us that underscored again, though this is a warning, it can be ignored.

32
00:02:02,430 --> 00:02:05,520
Now you can see we're getting the output two times.

33
00:02:05,760 --> 00:02:07,260
So this is for camera one.

34
00:02:07,860 --> 00:02:11,430
And the second one is for camera two.

35
00:02:11,790 --> 00:02:17,700
And what we can see is all the properties off camera one are copied in camera two.

36
00:02:17,880 --> 00:02:21,270
OK, so it has a ID one zero one.

37
00:02:21,270 --> 00:02:22,830
It also as HD one zero one.

38
00:02:23,550 --> 00:02:25,310
It has a name GoPro.

39
00:02:25,320 --> 00:02:26,310
It also has a name.

40
00:02:26,310 --> 00:02:26,760
GoPro.

41
00:02:26,970 --> 00:02:27,270
OK.

42
00:02:27,540 --> 00:02:29,430
And it has a similar price as well.

43
00:02:30,090 --> 00:02:31,140
Now what we're going to do.

44
00:02:31,200 --> 00:02:35,640
We are going to see how this copy was managed, OK?

45
00:02:36,090 --> 00:02:37,560
This copy is made.

46
00:02:39,420 --> 00:02:43,590
Using a special contractor, which is designed by default.

47
00:02:44,070 --> 00:02:46,680
And this is known as copy contractor.

48
00:02:46,770 --> 00:02:47,070
OK.

49
00:02:48,220 --> 00:02:52,240
If I write the code for the copy constructed, it will look something like this.

50
00:02:52,840 --> 00:02:59,320
So we are going to have a product and we are going to pass in the object, so that object will be of

51
00:02:59,320 --> 00:03:00,640
their type product.

52
00:03:01,840 --> 00:03:09,430
And maybe I can say that is some product X for which I'm going to make a copy now building this court

53
00:03:09,430 --> 00:03:16,780
is going to throw an edit that it says will be contractor must boss its first argument by defense.

54
00:03:16,880 --> 00:03:23,000
So we need to understand why it is saying that this argument must be passed by reference.

55
00:03:23,020 --> 00:03:23,250
OK?

56
00:03:23,800 --> 00:03:31,030
So when you do something like this and let's say X equal to 10 and you do and Y equal to X, what are

57
00:03:31,030 --> 00:03:31,360
you doing?

58
00:03:31,390 --> 00:03:33,910
You're actually making a copy of X in Y.

59
00:03:33,940 --> 00:03:34,300
Well, guess what?

60
00:03:34,300 --> 00:03:39,340
Similarly, when we are going to pass in an object, it will function.

61
00:03:39,340 --> 00:03:44,020
Maybe you have a function that takes some in these attacks and we win the mean.

62
00:03:44,020 --> 00:03:46,690
You have some in y equal to 10.

63
00:03:47,080 --> 00:03:54,360
And you call this function with the value of doing this by saying you are making X as a copy of Y.

64
00:03:54,820 --> 00:03:59,590
OK, so you are actually creating a copy that is initialized with the value y.

65
00:04:00,160 --> 00:04:04,570
This copy is created only if you copy constructor exists.

66
00:04:04,600 --> 00:04:07,180
So what we are doing, we are actually making a copy construct.

67
00:04:07,180 --> 00:04:13,390
But OK, and we are saying this copy constructor is asking for a copy which should be created by a copy

68
00:04:13,390 --> 00:04:13,840
constructor.

69
00:04:13,840 --> 00:04:15,920
So that means that copy cannot be created.

70
00:04:15,970 --> 00:04:21,530
OK, so that means instead of passing this x y value was by value means box.

71
00:04:21,550 --> 00:04:25,300
By making a copy, we actually have to pass it by a reference.

72
00:04:25,630 --> 00:04:29,500
So if I just add this idea, that means we are not making a copy.

73
00:04:29,890 --> 00:04:34,060
This X is going to be about camera one object and we are not making a copy out of it.

74
00:04:34,990 --> 00:04:37,030
Then this function is going to work.

75
00:04:37,450 --> 00:04:41,050
So if I build the code now and if I know, I run it.

76
00:04:42,620 --> 00:04:43,340
Let me show you.

77
00:04:43,670 --> 00:04:47,000
OK, now if you carefully look at the second one.

78
00:04:48,400 --> 00:04:49,750
Second one, what you can see.

79
00:04:50,140 --> 00:04:52,320
You can see the name is null.

80
00:04:54,560 --> 00:04:58,340
OK, so this is Camera2 and this.

81
00:05:00,600 --> 00:05:01,280
Camera one.

82
00:05:02,370 --> 00:05:03,960
Let us see this one.

83
00:05:04,140 --> 00:05:08,400
What we are printing, so this is not it, actually.

84
00:05:09,830 --> 00:05:10,520
What we are doing.

85
00:05:10,880 --> 00:05:12,260
Let us run this court again.

86
00:05:14,330 --> 00:05:17,930
So, yes, this is ghamro one.

87
00:05:18,410 --> 00:05:19,660
And this is camaraderie.

88
00:05:20,060 --> 00:05:27,050
Now what is happening earlier, the default copy contractor was doing some work, but now we have overwritten

89
00:05:27,050 --> 00:05:32,600
the copy contract that we sort of give you will define our own copy constructor and the body of that

90
00:05:32,600 --> 00:05:34,340
copy contract that is going to be empty.

91
00:05:34,680 --> 00:05:35,360
It is empty.

92
00:05:35,690 --> 00:05:39,070
That means normal user logos or name is null.

93
00:05:39,080 --> 00:05:41,900
It is garbage selling prices garbage and might be garbage.

94
00:05:41,930 --> 00:05:43,970
So this is not nothing but a garbage value.

95
00:05:46,490 --> 00:05:53,870
OK, so that means we actually have to write the logic to do the copy, OK, if we don't do it.

96
00:05:55,250 --> 00:06:01,400
Then, though, by default, copping injector does it, but since we have it under the default copy

97
00:06:01,400 --> 00:06:06,820
contract it now, it is expecting that we will provide the code to create the copy here.

98
00:06:06,860 --> 00:06:10,000
OK, so we have to write the code to create the copy.

99
00:06:10,010 --> 00:06:16,670
So what we can do, we can simply say let us copy the ID of X in the current dynamic.

100
00:06:16,670 --> 00:06:22,850
So again, the ID equals to extort I.D. I aikins in name equals to extort name.

101
00:06:23,160 --> 00:06:26,480
I can say I might have equals to extort.

102
00:06:26,480 --> 00:06:30,890
I might be against the selling price equals to extort selling price.

103
00:06:31,010 --> 00:06:33,680
OK, so now if I build this code?

104
00:06:37,000 --> 00:06:42,100
Alright, alright, so there is one problem with the Eddy this determined, but is it Eddy and I will

105
00:06:42,100 --> 00:06:43,840
tell you how we should handle it.

106
00:06:46,590 --> 00:06:48,300
I will tell you how we should handle it.

107
00:06:48,720 --> 00:06:53,460
But let us skip the name variable as of now and let me run the good.

108
00:06:53,910 --> 00:06:54,750
Let me run the call.

109
00:06:55,940 --> 00:07:04,670
And you can see that all the properties of the forest eddy are now copied in all the properties of the

110
00:07:05,210 --> 00:07:05,780
secondary.

111
00:07:05,960 --> 00:07:10,190
OK, so all of them are copied as it is.

112
00:07:11,910 --> 00:07:16,770
OK, so we have not copied the name as of now, there is a concept behind it.

113
00:07:16,980 --> 00:07:21,840
I will teach you something in the next lecture, but I hope you are understanding.

114
00:07:22,890 --> 00:07:29,970
The concept of a copy conjecture, I guess this is one way of making the call, and that is another

115
00:07:29,970 --> 00:07:30,150
way.

116
00:07:30,960 --> 00:07:31,590
I will tell you.

117
00:07:34,750 --> 00:07:38,650
So this is one way in which you can call the cops you contracted, OK?

118
00:07:39,070 --> 00:07:45,220
And maybe there is a product, Andy Gum, which is equal to camera.

119
00:07:45,850 --> 00:07:48,490
So in this case, also what is going to happen?

120
00:07:48,880 --> 00:07:51,340
We are going to call the cops contractor.

121
00:07:51,400 --> 00:07:56,980
OK, so this also makes a call to the copy contractor and I can say and can start.

122
00:07:58,360 --> 00:07:59,170
Shortages.

123
00:08:04,810 --> 00:08:06,100
So you can see we are getting.

124
00:08:21,200 --> 00:08:22,760
OK, let me just see.

125
00:08:24,210 --> 00:08:25,200
This should be handled.

126
00:08:26,300 --> 00:08:30,810
The camera recorded its webcam to our children, Handycam cameras showed it is alright.

127
00:08:40,710 --> 00:08:41,040
Yes.

128
00:08:41,100 --> 00:08:42,270
So the bird was old.

129
00:08:42,360 --> 00:08:49,170
So now if I see I'm getting camera one, I'm getting camera too, and I'm getting camera three, OK?

130
00:08:50,400 --> 00:08:56,580
And suppose if I just do it without defining my own copy, but I will also get the name.

131
00:08:57,420 --> 00:08:59,130
I will also get the name.

132
00:09:00,320 --> 00:09:03,270
So let us do it without defining the copy and chapter.

133
00:09:03,980 --> 00:09:06,290
Now you can see all of them have the same name.

134
00:09:06,830 --> 00:09:14,030
They have the same details and yes, so that means both the copy contractor working fine.

135
00:09:14,420 --> 00:09:21,350
But now the question is if the default copy contractor is working, why do we need to define the copy

136
00:09:21,350 --> 00:09:21,790
contractor?

137
00:09:22,310 --> 00:09:24,500
So we try to answer this right in the next lecture.

138
00:09:24,800 --> 00:09:27,980
And there is a concept of shallow copy and deep copy behind it.

1
00:00:00,830 --> 00:00:07,370
I saw one very cool thing about strings is that it supports a lot of operators, which make the comparisons

2
00:00:07,370 --> 00:00:08,090
very natural.

3
00:00:08,120 --> 00:00:11,930
For example, you can compare two strings using equal to.

4
00:00:12,470 --> 00:00:18,080
You can check if it is greater than or equal to or less than equal to all you can do concatenation.

5
00:00:18,720 --> 00:00:22,420
And you can also have plus equals two, which is also a very cool operator.

6
00:00:22,500 --> 00:00:23,590
Let me show you an example.

7
00:00:23,630 --> 00:00:24,710
So we have two strings.

8
00:00:25,130 --> 00:00:32,360
We are reading those and we are comparing them if they're equal or if one of them is greater or if that

9
00:00:32,360 --> 00:00:34,160
is not the case, the other must be greater.

10
00:00:34,160 --> 00:00:36,140
Because we have done is one is greater.

11
00:00:36,140 --> 00:00:42,080
That means as one comes after S2 in the dictionary or a little bit.

12
00:00:42,110 --> 00:00:43,700
So that is what we are writing it.

13
00:00:44,700 --> 00:00:49,090
So let me show you the code and I can give you an example.

14
00:00:49,100 --> 00:00:51,680
Let's say hello, and these are two strings.

15
00:00:51,860 --> 00:00:52,670
Both are equal.

16
00:00:53,240 --> 00:00:55,190
It's a halo, followed by word.

17
00:00:56,180 --> 00:00:59,990
Obviously, halo comes before word in the dictionary.

18
00:01:00,020 --> 00:01:10,460
Also, Halo is smaller, and if I have ABC, ABC, the ABC comes after ABC because this has an Oscar

19
00:01:10,460 --> 00:01:11,630
value that is 97.

20
00:01:12,020 --> 00:01:20,330
The smiley on whereas the capital as Osceola, 65, actually, the comparison is between the Oscar values

21
00:01:20,330 --> 00:01:24,320
of the letters, and that is why you're seeing this kind of behavior.

22
00:01:25,400 --> 00:01:33,080
So you can also have a string some name that is equal to, let's say, a Prateek and you want to append

23
00:01:33,080 --> 00:01:36,550
something to it, either you can to name equal to name plus or not.

24
00:01:36,560 --> 00:01:37,910
And that is my last name.

25
00:01:38,570 --> 00:01:42,620
Or you can also use the Plus equals two operator.

26
00:01:43,820 --> 00:01:44,690
To do the same thing.

27
00:01:44,910 --> 00:01:45,950
So let me just show you.

28
00:01:47,960 --> 00:01:52,040
So you're going to be pretty followed by noting that is what is the output?

29
00:01:53,510 --> 00:02:03,890
And you can also do string name plus equals to last name, so maybe string last name that is not an

30
00:02:04,290 --> 00:02:07,160
and name plus equals last name.

31
00:02:07,340 --> 00:02:11,620
This is again a very cool operator, so that means you're doing concatenation.

32
00:02:12,560 --> 00:02:17,090
And if I just see code name here, it will work as expected.

33
00:02:17,570 --> 00:02:17,780
It.

34
00:02:19,090 --> 00:02:21,820
One one critique, followed by nodding.

35
00:02:22,640 --> 00:02:28,880
I hope you did understand these operators, which can which are very handy to use on strings.

36
00:02:29,390 --> 00:02:30,920
And that's all for this video.

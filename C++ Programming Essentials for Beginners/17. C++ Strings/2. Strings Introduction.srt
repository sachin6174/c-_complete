1
00:00:00,510 --> 00:00:06,090
Everyone in this lecture, we're going to work with C++ strength and word of C++ strength.

2
00:00:06,120 --> 00:00:13,500
Let's look at the C++ strengths of the objects, which are created from string class, and it is available

3
00:00:13,500 --> 00:00:16,020
in C++ Standard Template Library.

4
00:00:16,600 --> 00:00:24,150
The C++ provides us a library of data and containers which contain the implementation of different datacenters

5
00:00:24,870 --> 00:00:30,980
like arrays, reactors, Linklaters type maps and also provide various in-built algorithms like sorting,

6
00:00:30,990 --> 00:00:33,390
searching techniques and a lot of other functions.

7
00:00:34,090 --> 00:00:39,490
So now what we are going to do, we are going to use this library to create a string.

8
00:00:39,530 --> 00:00:44,700
And let me tell you why it is powerful, more powerful than their noisy style string.

9
00:00:45,480 --> 00:00:53,130
And first of all, it is continues in memory like a character did it, and it does internally use a

10
00:00:53,220 --> 00:00:56,070
character ready to store some data inside.

11
00:00:56,280 --> 00:00:58,680
OK, let's say we created a string.

12
00:00:59,530 --> 00:01:02,850
OK, and we select stringers and this is equal to.

13
00:01:04,620 --> 00:01:11,550
This is internally going to create an attack, and it is going to put Halo inside a one very powerful

14
00:01:11,550 --> 00:01:13,140
advantage of using stringers.

15
00:01:13,440 --> 00:01:14,250
It's dynamic.

16
00:01:14,550 --> 00:01:16,920
We saw the character that it had a fixed sites.

17
00:01:17,610 --> 00:01:22,860
The site was fixed, but now it can grow and shrink in size during runtime.

18
00:01:23,100 --> 00:01:29,220
Now trending news and I want to dig in and put in what is Helloworld, what it will do.

19
00:01:29,220 --> 00:01:38,700
It will automatically manage the space for this edit and it will allocate more memory so that you can

20
00:01:38,700 --> 00:01:40,110
store a bigger string or GIF.

21
00:01:40,740 --> 00:01:43,260
How and this internally happens.

22
00:01:43,260 --> 00:01:49,790
We are not going going to dive into those details yet, but the behavior is very similar to how of attributes,

23
00:01:49,800 --> 00:01:50,050
OK?

24
00:01:50,070 --> 00:01:56,790
So again, all these things will cover when we go into the details of as a judge, when we know about

25
00:01:56,790 --> 00:01:59,100
vectors, how dynamic it is growing.

26
00:01:59,940 --> 00:02:04,950
So it is just a dynamic that can grow and expand during runtime.

27
00:02:04,950 --> 00:02:07,140
That is what you need to remember at this moment.

28
00:02:07,920 --> 00:02:09,930
And of course, they are better than corrected.

29
00:02:09,930 --> 00:02:13,530
It is because correct, but it is have a limitation of fixed safe.

30
00:02:13,680 --> 00:02:20,250
OK, and that might be problematic for us and does a lot of useful member functions.

31
00:02:20,280 --> 00:02:22,170
No need to write functions from scratch.

32
00:02:22,170 --> 00:02:27,120
OK, and this drink, it's it does come with its own behavior.

33
00:02:27,120 --> 00:02:35,390
OK, for example, you have an alarm clock, OK, and you want to perform certain functions on it.

34
00:02:35,400 --> 00:02:41,640
Maybe you're going to alarm or said, you say, OK, maybe I want to set the alarm for five a.m. the

35
00:02:41,640 --> 00:02:43,350
way we're going to call functions.

36
00:02:43,890 --> 00:02:46,440
We are going to use this dart operator, OK?

37
00:02:46,980 --> 00:02:49,350
An alarm is type of an object.

38
00:02:50,580 --> 00:02:58,380
And it does have a method when we use object oriented programming concepts, we call functions like

39
00:02:58,380 --> 00:03:04,920
these because these functions, they are bound with these objects or they can work with these objects.

40
00:03:05,020 --> 00:03:10,450
Similarly, string is an object and it comes with own functions of its own.

41
00:03:10,470 --> 00:03:13,380
So you can say, OK, tell me the length of the string.

42
00:03:14,220 --> 00:03:18,750
Tell me I wanted to search the string inside this particular string.

43
00:03:18,780 --> 00:03:26,010
OK, we'll look at various functions, which can be which we can use, and we don't need to write a

44
00:03:26,010 --> 00:03:27,290
lot of code from scratch.

45
00:03:27,300 --> 00:03:33,880
We can directly use the functionality that is available to us and to make the things more natural.

46
00:03:33,900 --> 00:03:40,330
They do support operators like Plus equal to less than greater than double equals and gives off character

47
00:03:40,330 --> 00:03:44,010
that is bizarre, that we have to use a function like string compare.

48
00:03:44,040 --> 00:03:44,370
OK.

49
00:03:45,300 --> 00:03:46,590
Which compares to strings.

50
00:03:47,010 --> 00:03:49,890
But here you can directly see whether this string is one in.

51
00:03:49,890 --> 00:03:53,370
This two article is string as greater than S2.

52
00:03:53,790 --> 00:03:57,900
You can directly use operators, which is more natural for us, OK?

53
00:03:58,530 --> 00:04:03,960
And they are safer to use because they also provides methods for bone checking, for example.

54
00:04:04,410 --> 00:04:05,520
I will give you an example.

55
00:04:06,040 --> 00:04:08,280
Now, this is a big problem with corrected.

56
00:04:08,280 --> 00:04:08,790
It is now.

57
00:04:08,790 --> 00:04:15,600
Suppose you have an attic, which is of some size, and if you even try to exist this index, it is

58
00:04:15,600 --> 00:04:17,540
outside the boundary of the correct that.

59
00:04:18,930 --> 00:04:20,390
It still might give you some value.

60
00:04:20,590 --> 00:04:26,400
That means there is no bone checking that is happening with character areas, but strings, if you try

61
00:04:26,400 --> 00:04:31,500
to access a character, it is out of the bones they're going to throw you some at a rock.

62
00:04:31,860 --> 00:04:35,010
Let me just give you this thing in demo as well.

63
00:04:35,070 --> 00:04:38,220
Maybe it's create a string as that is.

64
00:04:38,220 --> 00:04:38,550
Hello.

65
00:04:39,720 --> 00:04:45,090
And let me create a character study, let's say, as to.

66
00:04:46,560 --> 00:04:54,180
And I say, OK, I want to create this array of letters, I have five or letters, I have six, and

67
00:04:54,180 --> 00:04:56,700
I want to initialize this with the word Hello.

68
00:04:57,000 --> 00:04:57,300
OK.

69
00:04:58,740 --> 00:05:03,950
Now we have initialized a string, which is part of.

70
00:05:05,750 --> 00:05:12,230
The string header file contains a string glass, and we define the data type string, which is actually

71
00:05:12,230 --> 00:05:14,600
a glass, and we created an object.

72
00:05:14,870 --> 00:05:21,530
OK, now what I'm going to do, I want to access a particular letter so I can use s of index using the

73
00:05:21,530 --> 00:05:24,620
Square Records or I can use it.

74
00:05:24,710 --> 00:05:27,380
So I do the method which tell me what what letter is.

75
00:05:27,740 --> 00:05:28,610
Does he know the index?

76
00:05:28,770 --> 00:05:37,130
So maybe I can say we are in string and at zero the index, we might have some letter and something

77
00:05:37,130 --> 00:05:39,320
we can do with the corrected three.

78
00:05:41,010 --> 00:05:43,510
And I can say, OK, tell me what is their art?

79
00:05:43,530 --> 00:05:45,330
Does he the Knicks right now?

80
00:05:45,360 --> 00:05:49,890
What will give me the right answer because we are within the bounds of the string?

81
00:05:50,520 --> 00:05:54,210
Let us try to run this Code of Nordschleife string demo.

82
00:05:56,050 --> 00:06:00,970
And you can see both of them, they're the right little part of it, right?

83
00:06:01,570 --> 00:06:02,950
There is one more function.

84
00:06:04,060 --> 00:06:08,860
So either we can use art or we can use square records, they're fine.

85
00:06:09,590 --> 00:06:10,480
So maybe.

86
00:06:10,840 --> 00:06:14,450
Now let me ask, you could give me what is their art?

87
00:06:14,470 --> 00:06:15,550
The A10X index.

88
00:06:16,520 --> 00:06:19,280
And tell me what is did the eight index look?

89
00:06:20,700 --> 00:06:21,230
Are.

90
00:06:23,970 --> 00:06:30,120
Now it is it is giving me a warning, but it is not an error, OK, it is not an edit in this case,

91
00:06:31,110 --> 00:06:33,800
which is OK, it's just giving us a warning, right?

92
00:06:39,960 --> 00:06:40,710
Now you can see.

93
00:06:41,940 --> 00:06:43,770
We got a random error.

94
00:06:44,310 --> 00:06:51,860
There is an exception of the type out of the range, and this is coming from the string glass, OK,

95
00:06:51,870 --> 00:06:57,330
and if I just commend escorted out if I don't use the string glass, though, it is a warning which

96
00:06:57,330 --> 00:07:04,310
is generated by this caudwell children and you're going to we are getting a letter.

97
00:07:04,320 --> 00:07:06,930
It's reducing the age and index.

98
00:07:07,410 --> 00:07:08,710
You do have a letter.

99
00:07:08,730 --> 00:07:09,540
Oh, OK.

100
00:07:09,570 --> 00:07:11,010
It's not because of.

101
00:07:11,220 --> 00:07:13,170
Yes, it is our date and it index.

102
00:07:13,170 --> 00:07:15,630
OK, maybe it didn't.

103
00:07:16,020 --> 00:07:19,020
I want to see what is there at the 80th index.

104
00:07:20,370 --> 00:07:28,380
It still does work, OK, so this is actually an unsafe piece of code and we are not getting any of

105
00:07:28,380 --> 00:07:28,530
it.

106
00:07:29,610 --> 00:07:36,280
But here Discord is more safe because we are getting to know there is some problem that we are.

107
00:07:37,830 --> 00:07:39,870
Something wrong with our approach.

108
00:07:40,030 --> 00:07:41,070
So let me just show you.

109
00:07:42,490 --> 00:07:50,140
And you can see the program terminate because it through an exception, because it's important to tell

110
00:07:50,140 --> 00:07:51,940
the programmer that you are doing something wrong.

111
00:07:52,060 --> 00:07:55,620
That is why I'm telling you that it's it's more safe.

112
00:07:55,630 --> 00:07:58,450
It does provide methods for bone checking.

113
00:07:59,500 --> 00:08:01,770
So that brings it will go.

114
00:08:01,810 --> 00:08:04,570
And what about strengths in the next video?

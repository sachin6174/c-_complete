1
00:00:00,780 --> 00:00:06,980
Everyone, so let me show you a quick demo of how to create a functional kit, for example, the very

2
00:00:06,980 --> 00:00:10,520
first function that we want to create is to let play music.

3
00:00:10,940 --> 00:00:17,240
I can see wide play music and let's say I don't accept any parameters.

4
00:00:17,720 --> 00:00:22,430
And this is the body of the function where we define what this function is going to do.

5
00:00:22,910 --> 00:00:25,520
We are going to see out later playing music.

6
00:00:26,360 --> 00:00:28,040
OK, fine enough.

7
00:00:28,580 --> 00:00:34,190
And now we are in mean we are going to build this code and we are also going to run this code right?

8
00:00:35,440 --> 00:00:36,250
So let me show you.

9
00:00:39,820 --> 00:00:46,270
We have dodged large function them into right now, we don't get any output why?

10
00:00:46,750 --> 00:00:52,120
The first thing that we discussed, it's important to call a function if you want to execute that function.

11
00:00:52,820 --> 00:00:54,700
They can call the function, play music.

12
00:00:55,360 --> 00:00:55,900
All right.

13
00:00:56,990 --> 00:01:04,400
Now, if it underscored study, we have to build a code first and then I can run the code right now,

14
00:01:04,400 --> 00:01:06,350
we are getting this output playing music.

15
00:01:06,620 --> 00:01:15,320
That means the mean is the entry point of a program, the one the program is actually compiled from

16
00:01:15,320 --> 00:01:16,010
top to bottom.

17
00:01:16,790 --> 00:01:20,570
But the order of compilation does not decide the order of execution.

18
00:01:21,110 --> 00:01:23,480
The execution always starts from me.

19
00:01:23,780 --> 00:01:31,250
When you're executing this mean you came at this line 11 me and got pause at this line, and this is

20
00:01:31,250 --> 00:01:33,800
the function that started getting executing.

21
00:01:34,100 --> 00:01:38,750
OK, so this got executed, and after that, this part of the code is executed, OK?

22
00:01:39,230 --> 00:01:42,230
The first part again part and the third part, OK.

23
00:01:42,680 --> 00:01:45,080
This is what happens when you call a function.

24
00:01:45,320 --> 00:01:47,630
Right now, it's not designed.

25
00:01:47,630 --> 00:01:49,310
You can call a function only once.

26
00:01:49,760 --> 00:01:52,430
You can call a function as many times as you want.

27
00:01:52,670 --> 00:01:54,980
For example, I call play music three times.

28
00:01:55,970 --> 00:01:58,310
Now what is going to execute three times, right?

29
00:01:58,460 --> 00:01:59,390
So let's see how.

30
00:02:01,200 --> 00:02:03,030
And let me first show you the output.

31
00:02:04,430 --> 00:02:06,820
And you can to be playing music, playing music, playing music.

32
00:02:06,890 --> 00:02:08,390
It is getting all three times.

33
00:02:08,430 --> 00:02:11,630
OK, so the man is executing.

34
00:02:11,930 --> 00:02:12,860
It gets paused.

35
00:02:13,100 --> 00:02:14,450
Discord executes OK.

36
00:02:14,870 --> 00:02:18,320
Then again, at this line, this function again gets executed.

37
00:02:18,890 --> 00:02:20,090
I just line it again.

38
00:02:20,090 --> 00:02:20,930
Gets executed.

39
00:02:21,230 --> 00:02:21,500
OK.

40
00:02:22,100 --> 00:02:28,430
And then this part of the code is getting it whenever a function call happens, that means we are calling

41
00:02:28,820 --> 00:02:29,600
a function right?

42
00:02:30,580 --> 00:02:32,410
One analog I would try to delay.

43
00:02:32,420 --> 00:02:35,130
Does that mean is is like a boss, right?

44
00:02:35,210 --> 00:02:40,580
So men will always, always be the one that gets starts executing.

45
00:02:40,580 --> 00:02:45,710
It's like the head of the house right on Main can call any help.

46
00:02:45,710 --> 00:02:50,180
But to do some work, play music is a function, right?

47
00:02:50,510 --> 00:02:54,500
Men can call, play music or get you go and play some music, right?

48
00:02:55,270 --> 00:02:58,340
And this play music function can play music.

49
00:02:58,340 --> 00:03:01,040
That means it is doing something inside it.

50
00:03:01,760 --> 00:03:04,830
Or it may it may convey something back to the mean.

51
00:03:05,030 --> 00:03:07,740
It can also give some data back to them.

52
00:03:07,770 --> 00:03:09,350
So we are going to look at two things.

53
00:03:09,830 --> 00:03:12,700
One is how do they boss data?

54
00:03:13,840 --> 00:03:20,810
It will function and how do they turn data from a function back to the place where it is called OK?

55
00:03:21,410 --> 00:03:27,930
It is not just that that man is going to call a function, a function can also call some other function,

56
00:03:27,940 --> 00:03:31,660
for example, it said that is a function called, let's say.

57
00:03:33,410 --> 00:03:40,880
Cook vegetables, maybe there is a helper whose work is to cook the vegetables, right?

58
00:03:41,510 --> 00:03:46,850
But diet helper might ask someone else to bring the vegetables first, right?

59
00:03:47,420 --> 00:03:50,660
Maybe there is another helper whose work is to bring the vegetables right?

60
00:03:52,310 --> 00:03:58,440
Bring vegetables would be an added function, and this cooked vegetables might give you information,

61
00:03:58,440 --> 00:04:04,580
you can bring five kids of vegetables, and this might return something back to this function, OK?

62
00:04:05,000 --> 00:04:06,680
My work is done, OK?

63
00:04:06,820 --> 00:04:13,010
It might look I have brought these many vegetables, or it might say true or false that I was able to

64
00:04:13,010 --> 00:04:19,450
bring these many vegetables onboard and this school graduated with may tell something back to the monarchy

65
00:04:20,030 --> 00:04:21,260
that we have cooked.

66
00:04:22,840 --> 00:04:23,590
These many.

67
00:04:25,340 --> 00:04:25,910
Vegetables.

68
00:04:26,090 --> 00:04:27,620
It might give some status, OK?

69
00:04:27,680 --> 00:04:32,150
The vegetables are ready or the vegetables could not be prepared, something like that.

70
00:04:32,510 --> 00:04:32,780
OK.

71
00:04:33,550 --> 00:04:38,620
The what what happens is two or more blocks of good, like two blocks of code.

72
00:04:38,630 --> 00:04:40,430
They can communicate with each other.

73
00:04:40,940 --> 00:04:41,240
OK.

74
00:04:41,600 --> 00:04:43,580
And for that, what we need to do.

75
00:04:43,610 --> 00:04:45,290
So we have a function one.

76
00:04:45,830 --> 00:04:47,090
We have another function.

77
00:04:47,840 --> 00:04:50,720
The function one cannot function to function.

78
00:04:50,720 --> 00:04:57,130
Two, to execute some task and function and gain some data in the form of parameters.

79
00:04:57,140 --> 00:05:01,070
Look and function to build something back to function.

80
00:05:01,070 --> 00:05:05,510
One in the form of a return value in the form of a return value.

81
00:05:06,650 --> 00:05:09,230
In the first case, the return values void.

82
00:05:09,650 --> 00:05:13,720
That means play music does not tell anything back to the mean right.

83
00:05:14,680 --> 00:05:18,200
But let me give you another function.

84
00:05:18,920 --> 00:05:19,390
Where?

85
00:05:21,750 --> 00:05:23,310
The return type could be a strength.

86
00:05:23,490 --> 00:05:23,820
OK?

87
00:05:24,300 --> 00:05:27,150
The return trip could be a string, that's a.

88
00:05:28,300 --> 00:05:30,430
Void theHigh.

89
00:05:31,680 --> 00:05:34,800
And it's a string say hello.

90
00:05:35,040 --> 00:05:35,910
Something like this.

91
00:05:36,400 --> 00:05:40,560
I'm grading two functions, the one function does not return anything, right?

92
00:05:41,250 --> 00:05:42,870
And here I accept the name.

93
00:05:43,110 --> 00:05:49,530
I'm accepting a name and we are just saying, OK, hi, followed by name, right?

94
00:05:52,050 --> 00:05:57,630
So what we are doing, we are going to pass some data to this function, so maybe we are going to call

95
00:05:58,290 --> 00:06:02,160
say hi and I give my name the right.

96
00:06:03,360 --> 00:06:07,890
So let me buy this good for now, let us just comment this out.

97
00:06:10,120 --> 00:06:14,170
And I will just commend this one out.

98
00:06:14,230 --> 00:06:15,400
Maybe like this.

99
00:06:20,300 --> 00:06:21,980
OK, let me just delete this one, right?

100
00:06:25,390 --> 00:06:33,080
Now, say he's a function which is accepting a name, a string under this branding hype pretty got high

101
00:06:33,080 --> 00:06:34,310
around whatever it is.

102
00:06:34,330 --> 00:06:36,430
Maybe we can call this function do names.

103
00:06:45,190 --> 00:06:50,710
Now, let me try to run this code, and you can see we're getting an output hypothetic Unido.

104
00:06:51,550 --> 00:06:55,030
What both of these functions are doing, OK, so what?

105
00:06:55,720 --> 00:06:57,310
Play music and say, Hey, is doing so?

106
00:06:57,310 --> 00:07:04,060
Basically, both of them are getting a call from them to do some work right to play music.

107
00:07:05,740 --> 00:07:08,110
It gets cold from the mean, right?

108
00:07:09,230 --> 00:07:12,320
They also get called from the main right.

109
00:07:19,760 --> 00:07:26,520
And Limerick does not accepting that, OK, so it does not accept any of it as the thehigh function.

110
00:07:27,020 --> 00:07:30,590
It is accepting some great ability and it is doing some work.

111
00:07:31,010 --> 00:07:33,590
Both of the functions, they're not running anything back.

112
00:07:33,620 --> 00:07:37,150
They're just printing it on the screen to whatever is the output.

113
00:07:37,700 --> 00:07:40,700
The output is getting printed on the console.

114
00:07:41,060 --> 00:07:43,790
They're just printing on the console right now.

115
00:07:44,270 --> 00:07:45,800
Anyone can print on the console.

116
00:07:45,800 --> 00:07:48,020
Any function can print under and operate.

117
00:07:48,530 --> 00:07:49,790
And here we have it.

118
00:07:50,450 --> 00:07:51,110
What if you want?

119
00:07:51,110 --> 00:07:54,260
No, I don't want to send this output on the console.

120
00:07:54,650 --> 00:07:57,350
Maybe I want to send this output back to the mean, right?

121
00:07:57,980 --> 00:08:01,100
That is where the return values are going to come into the picture.

122
00:08:01,100 --> 00:08:05,930
So let us create another function where we send some data, like the disk.

123
00:08:07,100 --> 00:08:13,340
To this function, say hi and say hi or say hello, and maybe it runs.

124
00:08:13,380 --> 00:08:16,070
Let's say hello, pretty, it returns something like this.

125
00:08:17,600 --> 00:08:18,800
Oh, it's our choice.

126
00:08:18,800 --> 00:08:22,880
What we want to do with this value, this value is going to be with us.

127
00:08:23,720 --> 00:08:28,910
So when you wanted it done something, so there can come the concept of a return type of function,

128
00:08:28,910 --> 00:08:30,530
which does not return anything.

129
00:08:31,070 --> 00:08:32,970
It is going to have a void return date.

130
00:08:32,990 --> 00:08:35,960
That means nothing is returned, right?

131
00:08:36,200 --> 00:08:37,670
There is no return value.

132
00:08:39,110 --> 00:08:46,340
So now maybe I won't return something back, which is a string so I can just drink, say hello and string

133
00:08:46,340 --> 00:08:47,390
name will be input.

134
00:08:47,630 --> 00:08:54,290
We are creating this function, which is accepting a name like the followed by what value you want to

135
00:08:54,290 --> 00:08:54,660
return.

136
00:08:54,690 --> 00:08:57,680
So maybe I want to return a low plus.

137
00:08:57,680 --> 00:08:58,610
Name it.

138
00:09:00,570 --> 00:09:03,390
If I call this function, say hello, right?

139
00:09:05,800 --> 00:09:11,170
And I give some name, let's say, according minutes, OK?

140
00:09:11,560 --> 00:09:14,530
Or I just say hello to learners, right?

141
00:09:16,490 --> 00:09:23,150
And what is going to happen to add this line, we are calling a function which returns something OK,

142
00:09:23,870 --> 00:09:25,400
which does return something.

143
00:09:27,510 --> 00:09:33,380
We will not see this output on the screen because we are at no place, we have done printing on the

144
00:09:33,380 --> 00:09:37,610
screen, right, but that output that is going to come back to the mean.

145
00:09:38,150 --> 00:09:42,710
It would come here or it would come here, but it will not get printed on the screen because we are

146
00:09:42,710 --> 00:09:44,180
not using code anyway, right?

147
00:09:45,200 --> 00:09:46,340
Let me show you the output.

148
00:09:48,230 --> 00:09:53,090
Again, we are seeing the output of, say, high, but we are not seeing the output of what you need

149
00:09:53,090 --> 00:09:53,420
to do.

150
00:09:53,990 --> 00:09:58,730
The output is coming back and I mean, it is coming back in line number 22 when the function call is

151
00:09:58,730 --> 00:09:59,060
over.

152
00:09:59,810 --> 00:10:01,640
We going to see out this output.

153
00:10:02,000 --> 00:10:05,300
Let us print what what the output is now.

154
00:10:05,300 --> 00:10:10,340
If I build the code and if I run the code now, I'm going to see her loading minutes.

155
00:10:10,580 --> 00:10:14,480
And hello learners, this output is now getting produced.

156
00:10:14,510 --> 00:10:16,550
Maybe we can put the right.

157
00:10:17,990 --> 00:10:25,760
So what function does we made a function called say hello calling minutes, and this call got replaced

158
00:10:25,760 --> 00:10:32,660
by the output of the function, so the output of the function is what the functions is a low coding

159
00:10:32,680 --> 00:10:33,050
minute.

160
00:10:34,740 --> 00:10:35,020
OK.

161
00:10:35,280 --> 00:10:41,610
This is what the function is producing, and hence this output is now getting on the screen.

162
00:10:41,940 --> 00:10:43,740
Let me just try to explain it the low.

163
00:10:43,740 --> 00:10:45,210
So we have, I mean it.

164
00:10:46,820 --> 00:10:51,230
Maine is making a call to a function called Say Hello.

165
00:10:52,910 --> 00:10:56,830
I say hello is accepting some data, which is a strength.

166
00:10:57,280 --> 00:11:01,600
It's a coding minute, it is returning some data that is a low coding.

167
00:11:01,600 --> 00:11:07,690
When it's a now mean mean, it is up to mean what to do with this value.

168
00:11:07,760 --> 00:11:11,920
Amanda Knox, let me bring this value to the screen now we are printing it on the screen.

169
00:11:11,920 --> 00:11:18,280
OK, then this way we are able to look at the functions can accept data through parameters.

170
00:11:18,940 --> 00:11:22,270
Functions can also return some data through return values.

171
00:11:22,850 --> 00:11:28,360
You need to put a written statement followed by the value that you need to return and the function should

172
00:11:28,360 --> 00:11:30,160
have a return type.

173
00:11:31,170 --> 00:11:37,220
Of the type of data that you want to read in this case, we are running a string and hence the return

174
00:11:37,410 --> 00:11:39,560
of this function, as Stringer does not void.

175
00:11:40,410 --> 00:11:43,140
Let me give you one more example let's say you want to find.

176
00:11:44,450 --> 00:11:45,680
Area of letters.

177
00:11:46,400 --> 00:11:46,690
OK.

178
00:11:47,360 --> 00:11:48,950
And you're getting the radius.

179
00:11:49,100 --> 00:11:52,770
You don't want to open in the area, what do you want to return bacteria so you can get it done?

180
00:11:53,300 --> 00:11:57,410
Maybe three one one four in the radius in the radius.

181
00:11:57,440 --> 00:11:57,770
OK.

182
00:11:59,040 --> 00:12:06,480
Now you can say that, OK, I want to get the circle area on maybe whatever it is, the area we can

183
00:12:06,480 --> 00:12:14,840
call this function area of the circle, we can give some radius five and that value will come back here

184
00:12:14,850 --> 00:12:18,990
and that we're storing at an area rate that we are storing it in the area.

185
00:12:19,380 --> 00:12:27,300
And maybe you can see if area is greater than, let's say, 10, then maybe you can see out, uh, we

186
00:12:27,300 --> 00:12:30,600
can get the land.

187
00:12:30,780 --> 00:12:31,620
Something like that.

188
00:12:31,920 --> 00:12:32,190
OK.

189
00:12:34,150 --> 00:12:38,680
OK, now let me show you the output of this one.

190
00:12:41,330 --> 00:12:45,050
And you're going to be getting we can cut the land, OK now.

191
00:12:45,530 --> 00:12:47,080
Why am I dating you?

192
00:12:47,150 --> 00:12:49,040
This is why do we need it return value?

193
00:12:49,040 --> 00:12:55,610
Because there is a certain action that needs to be performed based upon what is being computed by a

194
00:12:55,610 --> 00:12:56,040
function.

195
00:12:56,100 --> 00:12:56,360
OK.

196
00:12:56,900 --> 00:13:00,440
We might not always want to print the return value on the screen.

197
00:13:00,950 --> 00:13:07,860
We might want to perform a further action based on what area has been returned by the function.

198
00:13:07,880 --> 00:13:12,440
OK, now this is where the return values are very important.

199
00:13:12,650 --> 00:13:12,980
OK.

200
00:13:13,610 --> 00:13:17,060
And you might also want to print the area on the screen.

201
00:13:17,090 --> 00:13:17,810
You can do OK.

202
00:13:18,320 --> 00:13:19,670
The area is this much.

203
00:13:20,870 --> 00:13:21,740
Let's build the code.

204
00:13:22,100 --> 00:13:23,870
And let me show you the output.

205
00:13:24,080 --> 00:13:24,370
OK.

206
00:13:24,950 --> 00:13:31,940
We are saying OK, if we can get the land and the area of the circle or the land is 78 units, that

207
00:13:31,940 --> 00:13:34,700
is the importance of return values.

208
00:13:34,820 --> 00:13:38,240
And I hope you got to understand some of these concepts.

209
00:13:38,810 --> 00:13:44,810
And with more examples coming in in the next few years, these concepts would become even more clear.

1
00:00:00,750 --> 00:00:01,460
Hello, everyone.

2
00:00:01,470 --> 00:00:06,980
So in this module, we are going to talk about functions to functions as an important concept, so they'll

3
00:00:06,990 --> 00:00:08,280
know what we were doing.

4
00:00:08,310 --> 00:00:12,390
We were writing the entire code inside me.

5
00:00:12,420 --> 00:00:12,720
OK.

6
00:00:13,200 --> 00:00:18,810
And as your code is going to grow longer, maintaining that code is going to become difficult.

7
00:00:18,840 --> 00:00:19,120
OK?

8
00:00:19,440 --> 00:00:23,380
Or let me try two related with the example of a book later.

9
00:00:23,400 --> 00:00:31,200
That is a book in which you have 500 pages and there are no chapters in the book, so it becomes very

10
00:00:31,200 --> 00:00:33,630
difficult to read the book to maintain that book.

11
00:00:34,200 --> 00:00:42,780
But now if I give you another book which has the same 500 pages, but those pages are divided into two

12
00:00:42,780 --> 00:00:43,370
injectors.

13
00:00:43,380 --> 00:00:45,570
OK, so which book you would like to read?

14
00:00:46,660 --> 00:00:52,690
I guess most of you would answer we would like to read the book B because it is more modular, it is

15
00:00:52,690 --> 00:00:59,410
more organized and it is easier to read and maintain the track right?

16
00:01:00,650 --> 00:01:05,390
That is where the functions come into picture, because instead of writing a very large piece of code,

17
00:01:05,870 --> 00:01:12,590
what we are going to do is we are going to divide our code into small small chunks, which are do the

18
00:01:12,590 --> 00:01:13,520
same functionality.

19
00:01:13,880 --> 00:01:20,570
But now that God would be more organized, more maintainable, more easy to relate to, this is one

20
00:01:20,570 --> 00:01:21,510
one block of code.

21
00:01:21,530 --> 00:01:22,800
This is another block of code.

22
00:01:22,850 --> 00:01:26,990
This is another block of look to each of these blocks of code.

23
00:01:27,650 --> 00:01:32,180
They have a specific theme or they have a specific functionality.

24
00:01:32,420 --> 00:01:32,750
OK.

25
00:01:33,440 --> 00:01:35,250
And we'll look at the example.

26
00:01:35,280 --> 00:01:36,200
OK, so let's see.

27
00:01:36,200 --> 00:01:37,340
How do we create the function?

28
00:01:37,470 --> 00:01:40,540
Let me give you an example of a sample function.

29
00:01:41,030 --> 00:01:41,900
What is the function of?

30
00:01:41,900 --> 00:01:47,450
Function is a block of instructions which only execute when it is called eight.

31
00:01:48,500 --> 00:01:54,200
That means creating a function is one thing, and if you want to execute that function, you have to

32
00:01:54,200 --> 00:01:55,610
call it, so let me show you.

33
00:01:56,480 --> 00:01:58,670
So there is a function, which is.

34
00:02:00,090 --> 00:02:02,110
Whose work is to play some music, right?

35
00:02:02,790 --> 00:02:07,350
So this is how we we have defined a function, do we really discuss what are these?

36
00:02:07,350 --> 00:02:08,400
But what is return?

37
00:02:08,400 --> 00:02:09,580
Typekit is function name.

38
00:02:10,080 --> 00:02:11,670
But this is what this function is doing.

39
00:02:11,670 --> 00:02:17,760
This function is actually going to play some music or it is just going to print playing music in our

40
00:02:17,760 --> 00:02:19,850
case, because it's a very simple function, right?

41
00:02:20,820 --> 00:02:25,230
I'm just defining this piece of code is creating the function.

42
00:02:25,470 --> 00:02:28,050
It will not get executed until it is called.

43
00:02:28,230 --> 00:02:33,860
So that there are two parts, one is defining the function, and second is when that piece of code should

44
00:02:33,870 --> 00:02:34,650
get executed.

45
00:02:34,680 --> 00:02:38,220
So for that, we need something which is known as a function called OK.

46
00:02:39,000 --> 00:02:41,610
So we'll we'll dive into the details of the syntax.

47
00:02:42,490 --> 00:02:43,020
So let's see.

48
00:02:43,650 --> 00:02:46,320
So the function definition looks something like this.

49
00:02:46,710 --> 00:02:51,330
So you will have a return type like in the previous case, it is void.

50
00:02:51,870 --> 00:02:54,780
Then you will have the name of the function to play music.

51
00:02:55,500 --> 00:03:02,160
And here in Gottlieb, in round records, you will specify one or more parameters or zero or more parameters,

52
00:03:02,160 --> 00:03:02,880
to be precise.

53
00:03:03,720 --> 00:03:05,370
Then you have one job instruction.

54
00:03:05,400 --> 00:03:06,810
Okay, what is this function doing?

55
00:03:07,290 --> 00:03:08,610
And then you have the return value.

56
00:03:08,970 --> 00:03:12,810
Does this function return anything back to the place from where it was called?

57
00:03:13,020 --> 00:03:14,730
So anyone can call a function or get.

58
00:03:16,290 --> 00:03:22,310
Maine is also a type of function because we have seen do function did so and mean so as the return date

59
00:03:22,320 --> 00:03:24,450
that this function returns zero eight.

60
00:03:24,460 --> 00:03:27,930
So that is where you can see there is a return zero statement at the end of this function.

61
00:03:28,710 --> 00:03:36,150
Maine is, by default, the first function that is called when a program starts and all of the functions

62
00:03:36,330 --> 00:03:38,130
you have to explicitly call them get.

63
00:03:38,160 --> 00:03:44,100
They do not get called automatically to play music at the function, and it does not return anything.

64
00:03:44,100 --> 00:03:47,370
So void means the function does not return anything, right?

65
00:03:47,780 --> 00:03:52,170
So that is why we don't need a written statement insider word function.

66
00:03:52,470 --> 00:03:53,580
But most of the cases.

67
00:03:55,900 --> 00:04:02,260
Now to call a function rewrite function name, followed by two parenthesis and a semicolon.

68
00:04:02,560 --> 00:04:05,020
So this is an example of a function going OK.

69
00:04:05,530 --> 00:04:06,160
This is.

70
00:04:08,260 --> 00:04:14,590
The place where you from, where this function is getting cold, that means when you make a function,

71
00:04:14,590 --> 00:04:19,630
call the control flow, jump to the function and start executing OK.

72
00:04:19,660 --> 00:04:25,390
The entire body of the function, which is inside this calibrate, gets all those instructions start

73
00:04:25,390 --> 00:04:30,760
getting executed when you actually make the function good, and a function can be called more than once,

74
00:04:30,760 --> 00:04:31,000
OK?

75
00:04:31,420 --> 00:04:36,310
And we can call it more than once, and hence it adds reusability to a code.

76
00:04:36,490 --> 00:04:39,400
For example, you want to check a number is prime or not.

77
00:04:40,120 --> 00:04:45,960
And if you create a function to check numbers or not, you can reuse it for multiple inputs.

78
00:04:45,970 --> 00:04:50,230
You can check if seven is prime, if it is prime, if 13 is prime, if 15 is prime.

79
00:04:51,160 --> 00:04:53,280
We can call a function multiple times.

80
00:04:53,290 --> 00:05:01,360
OK, so then a function can be called multiple times and it will perform the same logic for a given

81
00:05:01,360 --> 00:05:05,170
input, and hence it adds reusability to our code.

82
00:05:05,260 --> 00:05:09,250
So that is one very big advantage of creating functions, right?

83
00:05:10,990 --> 00:05:17,320
So one more thing, you can also parse data, which is known as barometers into a function when you're

84
00:05:18,670 --> 00:05:23,830
creating this function, play music you are sending or we can pass some number.

85
00:05:24,580 --> 00:05:27,420
And it is telling you gambling the end of the song.

86
00:05:28,350 --> 00:05:35,010
In dysfunction, OK, so you can parse data by specifying the data table of the parameter and the name

87
00:05:35,010 --> 00:05:36,000
of the parameter, right?

88
00:05:36,300 --> 00:05:39,120
These this data is known as barometer, right?

89
00:05:40,430 --> 00:05:40,730
OK.

90
00:05:41,910 --> 00:05:48,390
So what that parameters the parameters they act as variables inside a function, we can add as many

91
00:05:48,390 --> 00:05:52,100
as parameters as we want and we just need to separate them with a comma.

92
00:05:52,110 --> 00:05:57,420
So we have first parameter, we have second parameter, which we have heard parameter.

93
00:05:57,420 --> 00:06:03,670
So we have three integers denoting the song IDs and we are playing or get song one song to song.

94
00:06:03,960 --> 00:06:09,990
Again, this is how the function will be called it Play Music five six seven eight two to evolve theory.

95
00:06:10,350 --> 00:06:15,030
Let us try to jump into the coding part of functions from the next read you.

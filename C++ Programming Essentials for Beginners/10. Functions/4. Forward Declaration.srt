1
00:00:00,790 --> 00:00:01,410
Everyone.

2
00:00:01,570 --> 00:00:06,860
Let us recap what we have done so far, so a C++ function has two parts to one.

3
00:00:06,880 --> 00:00:09,580
What is known as your declaration?

4
00:00:10,030 --> 00:00:14,740
The declaration includes the name of the function, the return tape and the parameters that we have

5
00:00:14,890 --> 00:00:21,340
defined and definition include the body of the function to everything that is in the curly brackets.

6
00:00:22,090 --> 00:00:24,190
Basically, the logic that needs to be executed.

7
00:00:24,190 --> 00:00:27,570
So that part constitutes the definition of the function.

8
00:00:27,580 --> 00:00:29,340
And we have also talked about a function.

9
00:00:29,590 --> 00:00:29,890
OK.

10
00:00:30,400 --> 00:00:32,350
And we have seen the function must be called.

11
00:00:34,500 --> 00:00:38,640
So that it gets executed and a function can be called one or more times.

12
00:00:39,120 --> 00:00:40,890
That is one more thing we need to see.

13
00:00:40,920 --> 00:00:43,440
A function must be declared before it is called.

14
00:00:43,470 --> 00:00:45,570
Now what is the meaning of this statement?

15
00:00:46,230 --> 00:00:49,890
So let us try to understand these concepts through an example.

16
00:00:50,790 --> 00:00:54,630
What will will we have this function, this part?

17
00:00:55,900 --> 00:00:58,090
Is known as your declaration.

18
00:00:58,120 --> 00:00:58,480
OK.

19
00:00:59,200 --> 00:01:06,100
This part is your declaration of the function and anything that is inside the body starting from this

20
00:01:06,430 --> 00:01:06,790
record.

21
00:01:07,330 --> 00:01:09,610
It is known as the function definition.

22
00:01:11,080 --> 00:01:16,750
And this is your this line is your declaration, the name, the return type and the parameters, right?

23
00:01:17,140 --> 00:01:20,590
We are saying the function must be declared before we start using it.

24
00:01:20,620 --> 00:01:25,870
So in this case, we are using the function here and we have declared it before.

25
00:01:25,870 --> 00:01:29,410
We are using it perfectly fine if I believe it works fine.

26
00:01:29,980 --> 00:01:33,490
But if it is now, suppose I move this code from here to here.

27
00:01:33,760 --> 00:01:39,880
Now what we are doing, we are first calling the function and then we have the declaration and the definition

28
00:01:39,880 --> 00:01:40,500
of the function.

29
00:01:40,540 --> 00:01:46,300
So if I will look good, you see, we're getting an added use of undeclared identifier to play music

30
00:01:46,720 --> 00:01:52,300
to your compiler is compiling the code from top to bottom and it reads this line and it observed there

31
00:01:52,300 --> 00:01:53,910
is a function called to.

32
00:01:54,040 --> 00:01:57,700
At this point, the compiler does not know what function should be called.

33
00:01:58,270 --> 00:01:59,890
So how do we handle this case, OK?

34
00:02:00,490 --> 00:02:05,740
The way to do it is using something which we call forward declaration to what we will do.

35
00:02:06,400 --> 00:02:11,650
Maybe if you want to keep the body of the function below it, OK, but what you can do is you can just

36
00:02:11,650 --> 00:02:20,800
tell the compiler, OK, there would be something like a play music function later in this code, right?

37
00:02:20,860 --> 00:02:22,840
What we are doing, we are describing this part.

38
00:02:23,680 --> 00:02:29,110
We are describing the declaration and we are defining it in the beginning so that the compiler gets

39
00:02:29,110 --> 00:02:35,890
to know, OK, and there is a function by the name of music, which except this song and.

40
00:02:37,620 --> 00:02:42,600
If you see a call to play music function, understand this is a call to play music function, OK?

41
00:02:42,870 --> 00:02:45,720
And we have defined the code at any rate.

42
00:02:46,140 --> 00:02:51,870
This way, your code would get compiled and add the runtime when this function is actually getting called.

43
00:02:52,290 --> 00:02:55,410
The corresponding code of play music will also get executed.

44
00:02:55,410 --> 00:02:56,320
So if the code.

45
00:02:56,940 --> 00:03:03,960
And if I show you the demo, I'm calling this nightlies forward declaration.

46
00:03:04,800 --> 00:03:06,210
And yes, it is working fine.

47
00:03:06,300 --> 00:03:07,110
It works.

48
00:03:07,260 --> 00:03:09,360
We are getting playing music with the song Lady.

49
00:03:09,390 --> 00:03:10,080
That is funny.

50
00:03:10,870 --> 00:03:16,890
I hope you have understood this concept of forward declaration, and it tells the compiler in advance

51
00:03:16,890 --> 00:03:23,280
that there would be a function play music, which might get called before you see the definition of

52
00:03:23,280 --> 00:03:23,520
that.

53
00:03:23,880 --> 00:03:24,150
OK.

54
00:03:24,510 --> 00:03:27,930
That is the whole idea of doing the Wildwood Declaration.

55
00:03:28,050 --> 00:03:33,450
Even you can put this party that is all the work in the similar manner.

56
00:03:33,480 --> 00:03:36,480
OK, but maybe we can put it it.

57
00:03:36,480 --> 00:03:39,930
OK, that's all for this video and thank you.

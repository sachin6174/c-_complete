1
00:00:02,470 --> 00:00:03,100
Hi, everyone.

2
00:00:03,460 --> 00:00:10,000
In this lecture, we're going to talk about namespaces, OK, so the concept of namespaces is has been

3
00:00:10,000 --> 00:00:16,570
created to avoid naming conflicts when you can use multiple third party libraries in the same program.

4
00:00:17,380 --> 00:00:21,640
Whenever you're writing code, you are importing some code, like from India while you're importing

5
00:00:21,640 --> 00:00:22,190
few things.

6
00:00:22,810 --> 00:00:24,730
And if you use multiple libraries.

7
00:00:24,760 --> 00:00:33,040
OK, so it may happen that two people develop two different libraries and they created a common function

8
00:00:33,280 --> 00:00:33,860
for the same.

9
00:00:33,880 --> 00:00:34,180
OK.

10
00:00:34,870 --> 00:00:40,210
One example there is a popular choice that is a popular library, which is known as open TV.

11
00:00:40,870 --> 00:00:41,100
OK.

12
00:00:41,450 --> 00:00:47,770
And it is for basically used for tasks related with image processing.

13
00:00:48,070 --> 00:00:48,280
OK.

14
00:00:49,390 --> 00:00:57,280
And what may happen is not two different beams later, these libraries, and that was the team that

15
00:00:57,280 --> 00:00:58,390
created C++.

16
00:00:58,510 --> 00:01:01,330
Let us assume they created a function called print.

17
00:01:02,080 --> 00:01:02,380
OK.

18
00:01:02,920 --> 00:01:04,600
And that except in digit.

19
00:01:05,080 --> 00:01:07,600
And they print that integer on the screen.

20
00:01:09,070 --> 00:01:16,540
But let us say there is these people are open to, let's say they also created a library and they created

21
00:01:16,540 --> 00:01:17,620
a function called print.

22
00:01:18,510 --> 00:01:23,740
And maybe this except the image, and it draws that image on the screen.

23
00:01:24,010 --> 00:01:24,220
It.

24
00:01:25,950 --> 00:01:31,710
Now, the functionality of this brain function would be very different from the functionality of this

25
00:01:31,710 --> 00:01:33,900
brain function, but they have the same name.

26
00:01:34,860 --> 00:01:40,380
Now how do we get to know that OK, if are using both the libraries in the world, for example, if

27
00:01:40,380 --> 00:01:45,090
you write some good news, OK, I want to include iOS stream.

28
00:01:46,580 --> 00:01:53,300
Because I also want to print Indigenous and I also want to use opens even my library because maybe I

29
00:01:53,300 --> 00:01:54,990
want to look with images as well.

30
00:01:55,640 --> 00:01:57,170
I mean, we should include open TV.

31
00:01:57,920 --> 00:02:00,110
I include both of these libraries in my code.

32
00:02:00,860 --> 00:02:07,280
Now in your mean or in your other function, you're saying, OK, I want to use the brain function.

33
00:02:08,390 --> 00:02:12,500
Now, how do you identify which brain function is this one?

34
00:02:12,530 --> 00:02:19,670
Is it the brain function coming from the C++ library or is it the brain function coming from the open

35
00:02:19,670 --> 00:02:20,960
TV C++ library?

36
00:02:21,320 --> 00:02:24,560
This is this is actually creating a kind of a confusion.

37
00:02:25,260 --> 00:02:26,870
So how do we resolve this conflict?

38
00:02:27,050 --> 00:02:31,640
So we resolve this conflict by defining the namespace before the function?

39
00:02:31,760 --> 00:02:40,980
So these OK, if it is coming from the C++ library, those C++ library defines all its functions and

40
00:02:42,130 --> 00:02:48,490
in entire classes inside a namespace which is known as SD.

41
00:02:48,750 --> 00:02:57,060
OK, that means the standard name of the C++ namespace and openly will be able to find everything inside

42
00:02:57,060 --> 00:02:58,290
the namespace called TV.

43
00:02:58,990 --> 00:03:05,540
If I want to use the function from this open TV space or namespace, I will say, OK, it is equal and

44
00:03:05,540 --> 00:03:06,380
go and OK.

45
00:03:07,390 --> 00:03:11,710
That means the brain function from the open living space.

46
00:03:12,040 --> 00:03:14,800
Or if they want to use this function, I can look at study.

47
00:03:16,430 --> 00:03:22,640
Brent, maybe use this particular function to namespaces odd used to.

48
00:03:24,810 --> 00:03:29,670
Avoid conflicts because and when you're using multiple libraries.

49
00:03:30,330 --> 00:03:35,490
Few of the things, they can have common names, but I hope you understood what what is the concept

50
00:03:35,490 --> 00:03:40,870
at the high level to avoid data structure and function name conflicts?

51
00:03:40,890 --> 00:03:46,830
OK, so even and there can be two different researchers which behave in a different manner, but they

52
00:03:46,830 --> 00:03:51,960
might get the same name because it was created independently by two different teams.

53
00:03:53,290 --> 00:03:56,360
But each team will define its own namespace.

54
00:03:56,420 --> 00:04:00,820
OK, so open TV has its own namespace, which is known as S.V.

55
00:04:01,390 --> 00:04:05,110
And if you does, OK, I will not define.

56
00:04:08,600 --> 00:04:15,680
Wee, every bit I will just show you, the good to study is the namespace for the standard it as a name

57
00:04:15,680 --> 00:04:25,100
for the standard C++ namespace and writing studio code, for example, you want to use the object code

58
00:04:25,520 --> 00:04:28,430
and this object belongs to the standard namespace.

59
00:04:28,970 --> 00:04:35,750
It will tell the compiler to use code from the standard namespace by default when we are writing code.

60
00:04:35,990 --> 00:04:38,210
I will just give you a quick demo as well.

61
00:04:39,080 --> 00:04:39,650
So.

62
00:04:41,350 --> 00:04:45,880
OK, so this is one of the code that we have written, so we are saying it using names.

63
00:04:46,630 --> 00:04:53,110
So that means all the data, such names, all the function names that we are using in this code they

64
00:04:53,110 --> 00:04:54,870
belong to, the standard is OK.

65
00:04:55,210 --> 00:05:02,230
So we are just kind of saying, OK, you don't ask me which namespace see belongs to or which namespace

66
00:05:02,240 --> 00:05:03,160
code belongs to.

67
00:05:03,490 --> 00:05:05,890
Everything belongs to the standard namespace, OK?

68
00:05:06,250 --> 00:05:11,380
That is why we have included this line in the beginning so that we don't have to tell compile it again

69
00:05:11,380 --> 00:05:11,800
and again.

70
00:05:12,130 --> 00:05:17,320
But suppose you don't include this line in your code, and let's say we're building this code.

71
00:05:18,580 --> 00:05:21,560
And this time I'm not writing using names, but as Julie.

72
00:05:21,970 --> 00:05:26,320
So let me see if this file and maybe say a namespace demo or TPP.

73
00:05:27,370 --> 00:05:29,200
If it's intimate.

74
00:05:29,380 --> 00:05:32,560
And I feel out, it's a hello world.

75
00:05:33,400 --> 00:05:39,640
Let us see what happens if you use something from a standard name spit and without telling the compiler.

76
00:05:39,720 --> 00:05:43,210
This is this code belongs to the standard namespace.

77
00:05:44,080 --> 00:05:45,700
Let's see what happened in this case.

78
00:05:49,650 --> 00:05:49,940
OK.

79
00:05:50,420 --> 00:05:53,430
The file name is names beside them.

80
00:05:53,520 --> 00:05:54,780
We are going to compile this.

81
00:05:55,140 --> 00:06:00,240
We can say the C++ namespace got damaged or ZBB.

82
00:06:00,840 --> 00:06:02,280
And now you can see that.

83
00:06:03,210 --> 00:06:05,310
It is saying error.

84
00:06:05,400 --> 00:06:11,090
Use of undeclared identify it the out it says, did you mean s2.0?

85
00:06:11,810 --> 00:06:16,740
It is giving you a recommendation that this identified is not declared.

86
00:06:17,190 --> 00:06:17,550
OK.

87
00:06:17,910 --> 00:06:22,950
So although this object exists in the library, I was dream.

88
00:06:23,770 --> 00:06:25,410
But but.

89
00:06:26,990 --> 00:06:33,680
Every object should come from a namespace, the name is a region where all these names are declared

90
00:06:33,770 --> 00:06:35,240
OK, so they are not defined.

91
00:06:35,780 --> 00:06:36,320
Declared.

92
00:06:36,940 --> 00:06:41,990
So in order to use anything, the declaration is also important or equally as their definition.

93
00:06:42,620 --> 00:06:47,210
One thing is how to create that object that is given a new stream.

94
00:06:47,240 --> 00:06:47,570
OK.

95
00:06:48,200 --> 00:06:55,430
And another thing is registering the name of the object with this compiler, that thing that registering

96
00:06:55,430 --> 00:06:57,860
the name is known as declaration.

97
00:06:57,860 --> 00:07:03,600
We are telling the compiler, OK, and there is something known as C out how code works.

98
00:07:03,620 --> 00:07:07,820
It is in our stream, but we have to register this name.

99
00:07:07,910 --> 00:07:14,060
That is that it is stored in the namespace of C++, which is goes by the name as Judy.

100
00:07:14,120 --> 00:07:18,500
So a study is the name of the standard C++ names.

101
00:07:19,340 --> 00:07:26,240
In this course, we are only going to follow one namespace that is a standard C++ namespace and everything

102
00:07:26,240 --> 00:07:26,930
is declared.

103
00:07:26,930 --> 00:07:29,130
And this namespace was the OTAs declared here.

104
00:07:29,630 --> 00:07:30,770
The declared here.

105
00:07:30,830 --> 00:07:31,160
OK.

106
00:07:32,000 --> 00:07:34,580
Either you include the entire namespace.

107
00:07:35,100 --> 00:07:41,870
OK, that will mean all the things are coming from the standard namespace.

108
00:07:42,470 --> 00:07:48,020
But if you just want to use this code, not everything else from the start namespace, you're going

109
00:07:48,020 --> 00:07:50,510
to study well, then go out.

110
00:07:50,840 --> 00:07:55,250
OK, I'm saying the code that has been declared inside the standard namespace.

111
00:07:55,250 --> 00:07:57,350
Use that and print Hello world.

112
00:07:57,770 --> 00:08:00,560
OK, so now if I build my code again?

113
00:08:01,770 --> 00:08:06,900
And now you can see it works perfectly fine and I can run it using it out.

114
00:08:08,820 --> 00:08:15,390
So it says hello, so this is working well, firstly, fine either you do this, but if you do this,

115
00:08:15,390 --> 00:08:22,050
you have to use it with every statement like you have actually seen and do some work.

116
00:08:23,700 --> 00:08:29,940
And or whatever is the number that you want to take in, so you're going to end then and begin to then

117
00:08:29,940 --> 00:08:31,140
write something like this?

118
00:08:32,340 --> 00:08:38,460
So let's build the gold again, and let's say I want to run it again, so I will dig and put another

119
00:08:38,460 --> 00:08:38,850
five.

120
00:08:40,770 --> 00:08:47,910
So one runways, you use a study with all the researchers, all the objects are all the functions that

121
00:08:47,910 --> 00:08:50,340
you want to use from the standard namespace.

122
00:08:50,680 --> 00:08:54,600
The database you OK, I will only follow the standard namespace.

123
00:08:55,790 --> 00:08:59,060
And dressed everything, I will figure it out on my own right.

124
00:08:59,900 --> 00:09:06,350
Maybe what you're going to do if you're using working with the image processing library and you also

125
00:09:06,350 --> 00:09:06,860
want to.

126
00:09:08,670 --> 00:09:10,050
Maybe include open TV.

127
00:09:10,500 --> 00:09:12,340
This needs to be installed separately.

128
00:09:13,080 --> 00:09:15,810
You can also include two namespaces.

129
00:09:18,300 --> 00:09:26,760
Insider gold and now a conflict will arise if you have a method to print and it exists in both the namespaces.

130
00:09:26,790 --> 00:09:33,570
Let's say it exists in a steady namespace also, and it exists in the sea names.

131
00:09:33,570 --> 00:09:39,300
But also then you have to specify, OK, I'm talking about the print method that is there in the CV

132
00:09:39,300 --> 00:09:40,950
namespace, something like this.

133
00:09:42,240 --> 00:09:49,670
So this will help you to avoid any naming conflict that may arise that that is all about named basis.

134
00:09:49,680 --> 00:09:51,690
I wanted to talk to you.

135
00:09:52,230 --> 00:09:53,940
And that's all for this video.

136
00:09:54,120 --> 00:09:56,280
I hope you find it a little helpful.

137
00:09:57,210 --> 00:09:57,990
Thanks a lot.

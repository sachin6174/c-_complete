1
00:00:02,590 --> 00:00:07,970
Everyone in this lecture will talk about Randy Fires and a little bit about variables as well.

2
00:00:08,140 --> 00:00:14,140
OK, what is an identified identifier is derived from the word identity.

3
00:00:14,710 --> 00:00:21,580
Basically, whenever you want to identify some entity in your program, you define its name using identified

4
00:00:21,640 --> 00:00:23,740
so identified as just kind of a name.

5
00:00:24,160 --> 00:00:26,640
OK, so so what?

6
00:00:26,650 --> 00:00:28,770
And then divide on the variable.

7
00:00:29,410 --> 00:00:35,920
There are the names allotted by the users to particular entity in the program who is a user.

8
00:00:36,250 --> 00:00:37,540
It's actually the programmer.

9
00:00:37,540 --> 00:00:43,180
The programmer can give any name of his choice to a particular entity in the program.

10
00:00:43,630 --> 00:00:45,430
What could be an entertainer program?

11
00:00:45,610 --> 00:00:48,040
So an example of entity could be a function.

12
00:00:48,920 --> 00:00:56,480
OK, maybe I want to compute a function, and that function gives me the factorial of a number.

13
00:00:56,500 --> 00:00:56,950
Let's see.

14
00:00:57,640 --> 00:01:01,360
So maybe I can create a function whose name is factorial?

15
00:01:04,740 --> 00:01:07,770
And it could be some bucket where I'm going to store some data.

16
00:01:08,990 --> 00:01:14,670
So maybe you want to store some data and that data is stored in that particular bucket called ledger

17
00:01:14,670 --> 00:01:15,090
marks.

18
00:01:15,480 --> 00:01:18,590
So you look, I want to store some marks and that Marks is equal to 80.

19
00:01:20,170 --> 00:01:27,880
Mox is actually identified, but since it is also holding some memory, so we call this Mox as a variable.

20
00:01:27,970 --> 00:01:28,300
OK?

21
00:01:29,140 --> 00:01:30,870
We call this as a variable.

22
00:01:31,480 --> 00:01:36,850
You can have functions or functions are nothing, but it's a group of instructions that are trapped

23
00:01:36,850 --> 00:01:38,740
inside a block of code.

24
00:01:38,740 --> 00:01:39,760
And we need to give it.

25
00:01:39,760 --> 00:01:40,630
Give it some name.

26
00:01:40,630 --> 00:01:40,840
OK?

27
00:01:40,870 --> 00:01:44,370
For example, Victoria will adopt certain instruction inside it.

28
00:01:44,960 --> 00:01:51,130
The logic to compute the Victorian OK, so identified as only used to identify an entity uniquely in

29
00:01:51,130 --> 00:01:53,290
the program at the time of execution.

30
00:01:53,740 --> 00:02:03,910
Whereas a variable is a name given to a memory location that is used to hold the value because it's

31
00:02:03,910 --> 00:02:07,570
a memory location and we are giving it some name.

32
00:02:08,110 --> 00:02:17,950
We are saying that Marks is a variable and we are identifying this variable marks by the name of marks

33
00:02:18,280 --> 00:02:23,350
identified as just a name, wherever the concept of variable means the bucket as well, OK?

34
00:02:23,950 --> 00:02:27,520
Identified as just a name and variables do have a name.

35
00:02:27,800 --> 00:02:28,090
OK.

36
00:02:28,540 --> 00:02:33,310
And when we say variable, it also means the bucket where the data is being stored, OK?

37
00:02:33,670 --> 00:02:35,920
The name of the bucket is just to identify it.

38
00:02:36,700 --> 00:02:42,490
There is a very slight difference between the two items identified as just a name wherever it bucket.

39
00:02:42,880 --> 00:02:45,280
The variable is a bucket, which also has a name.

40
00:02:45,310 --> 00:02:53,470
OK, so identifiers can be used to give names to the buckets, to the bunch of lines of code, to the

41
00:02:53,470 --> 00:02:54,700
classes and so on.

42
00:02:55,160 --> 00:03:01,060
I hope you have understood this slight distinction between the concept of a variable and a bucket.

43
00:03:01,420 --> 00:03:02,980
I suppose you have two dogs.

44
00:03:03,880 --> 00:03:09,010
And these four, these two dogs, you want to store information in the memory, OK?

45
00:03:09,430 --> 00:03:10,000
What are you doing?

46
00:03:10,270 --> 00:03:17,590
You're going to create some kind of bucket which can hold a dog and maybe you can give this bucket a

47
00:03:17,590 --> 00:03:17,820
name.

48
00:03:17,860 --> 00:03:20,630
Maybe you can say this dog is screwed up.

49
00:03:21,100 --> 00:03:21,370
OK.

50
00:03:21,940 --> 00:03:23,050
And it's stored, OK?

51
00:03:23,380 --> 00:03:24,960
This dog has curly hair.

52
00:03:24,970 --> 00:03:29,790
It has a height of eight or something, something like this, and we'll be in for another dog.

53
00:03:29,800 --> 00:03:32,560
Maybe you want to create another bucket that is brutal.

54
00:03:32,860 --> 00:03:33,130
OK.

55
00:03:33,910 --> 00:03:35,020
The name of the bucket.

56
00:03:35,930 --> 00:03:39,740
Is identified, whereas the bucket itself.

57
00:03:40,800 --> 00:03:44,910
Is a variable look, it's kind of a variable or object.

58
00:03:45,780 --> 00:03:49,110
So that's what I wanted to convey.

59
00:03:50,180 --> 00:03:52,370
And let us have this example.

60
00:03:52,790 --> 00:03:55,550
We want to identify the identifiers, OK?

61
00:03:56,270 --> 00:03:57,350
Let us see who can do it.

62
00:03:58,560 --> 00:04:00,270
So I hope you have given it a try.

63
00:04:00,300 --> 00:04:04,890
So if you look carefully now, this is actually a function in C++.

64
00:04:05,310 --> 00:04:10,410
The function is a block of code that robs certain instructions inside it.

65
00:04:10,950 --> 00:04:13,440
So we are actually sending three things to this function.

66
00:04:14,100 --> 00:04:15,180
So we are sending.

67
00:04:17,090 --> 00:04:24,110
B, C and M, which might refer for the marks in physics, chemistry and maths, and we are saying,

68
00:04:24,110 --> 00:04:29,180
look, these names PCM, they identify a bucket.

69
00:04:29,390 --> 00:04:29,720
OK.

70
00:04:30,410 --> 00:04:36,650
They are the names of variables, so they are identifiers and this is the name of the function.

71
00:04:36,800 --> 00:04:39,860
This is also entered divide, so calculate marks.

72
00:04:40,580 --> 00:04:43,580
It is also a name that has been defined by the program at.

73
00:04:45,030 --> 00:04:49,020
And there is also a variable average that is also.

74
00:04:50,710 --> 00:04:56,540
Defining the name of the bucket, which we call it as a bridge, all of them are identified.

75
00:04:56,600 --> 00:04:56,860
OK.

76
00:04:58,170 --> 00:04:58,620
And.

77
00:04:59,790 --> 00:05:07,680
From all the Red Devils, except calculate marks, bcm and average, they're actually very much look.

78
00:05:08,870 --> 00:05:14,330
That name is identified, but what they are, they're actually variables because they're holding some

79
00:05:14,330 --> 00:05:15,130
data inside it.

80
00:05:15,920 --> 00:05:17,390
They are variables as well.

81
00:05:17,420 --> 00:05:23,900
OK, so that is what is the difference between an identifiable and variable?

82
00:05:24,890 --> 00:05:33,290
We'll dive deeper into the concept and will you'll get more comfortable as we do more coding questions,

83
00:05:33,710 --> 00:05:37,370
and this will bring a lot of clarity in the coming lectures as well.

84
00:05:37,400 --> 00:05:39,230
OK, so that's all for this video.

85
00:05:39,230 --> 00:05:39,770
Thank you.

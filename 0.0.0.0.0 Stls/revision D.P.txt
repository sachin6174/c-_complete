######## 0-1 knqpsack problem#####
int t[1000][1000];
// memset(t,-1, sizeof(t)); 
int knapsack(int wt[] , int val[] , int W , int n ) {
	// int  t[W][n];
	// for (int i = 0 ; i < W ; i++) {
	// 	for (int j = 0 ; j < n; j++) {
	// 		t[i][j] = -1;
	// 	}
	// }

	if (n == 0 || W == 0)
		return 0 ;
	if (t[W][n] != -1)
		return t[W][n];
	if (wt[n - 1] <= W) { // wegight W se chotaa hain hain to hum max of jab us value ko lage and jab nahi lenge

		return t[W][n] = max(val[n - 1] + knapsack(wt , val, W - wt[n - 1], n - 1), knapsack(wt , val , W, n - 1 ));

	}
	else
		return t[W][n] =  knapsack(wt, val, W, n - 1);

}

int main() {
	int val[] = { 60, 100, 120 };
	int wt[] = { 10, 20, 30 };
	// int W = 50;

	int t[5][5];
	memset(t, -1, sizeof(t));
	// int n = sizeof(val) / sizeof(val[0]);
	cout << knapsack(wt, val, 3, 3 ) << "HELLO WORLD ";
	for (int i = 0 ; i < 3 ; i++) {
		for (int j = 0 ; j < 3 ; j++) {
			cout << t[i][j] << " " ;
		}
		cout << endl ;
	}
    // cout<<t[3][3];
	return 0;
}
############ques - ROD CUTTING PROBLEM #######
ISKE NICHE WALE PROBLEM LIKHNA HAIN WITH PALN 


**********************************************************
//aditya verma coin change recursion 
# include <bits/stdc++.h>
using namespace std;   //code bilkul sahi run kar raha hain par gfg me tle ayega
int count( int S[], int m, int n ){ // isko dp se optomise kar sakte hain 
    if(n==0){      
        return 1;        //note here m=no element in the array
    }                    //n = currency given or can say  given value 

    if(m==0&&n>=1){
        return 0;
    }
    if(n <0){
        return 0;
    }
      
      if(S[m-1]<=n){                     //m-1 ki jagah m likhne se bounded(0/1)knapsak unbonded napsack me badl gaya 
         return count(S,m-1, n)+count(S ,m,n-S[m-1]);
      }        //element ko nahi     //yaha element ko liya hain aur  
      else     //liya                 //hum bar bar ek hi element ko le sakte hain isliye   
        return count(S,m-1 ,n);      //yaha m-1 ki jagah sirf m likha hain 

}
int main(){
    // int n = 4 , m = 3;
    int S[] = {1,2,3};
    cout<<count(S,3,4)<<endl;
    return 0 ;
}
*****************
# include <bits/stdc++.h>
using namespace std;  //top down
//thora sa kahi galt ho raha hain 
// int t[1000][1000];
void count( int S[], int m, int n ){
    int t[m+1][n+1];
    for(int i=0; i<=m; i++)
        t[i][0]=1;
    for(int j=1;j<=n; j++)
        t[0][j]=0;
    for(int i=1; i<=m;i++){
        for(int  j=1 ; j<=n  ; j++){
            if(S[i-1]<=j){
            
                t[i][j]=t[i][j-S[i-1]]+t[i-1][j];
            }
            else{
                t[i][j]=t[i-1][j];
            }
            
        }
    }

 for(int i=0; i<=m ; i++){
    for(int j=0 ; j<=n ; j++){
        cout<<t[i][j]<<" ";
    }
    cout<<endl;
 }
}

int main(){
    int S[] = {1,2,3};
    count(S,3,4);
    return 0 ;
}

*********************************
// coin change problem // hume nuber aur coins diya pata karna hain kitne coins lagenge  // 
int coincount(int a[], int n , int total ){
	int matrix[n+1][total+1];

	for(int i =0 ;i<n ; i++){
		// matrix[i][0]=0;
		for(int j=0; j<=total ; j++){
			if(j==0)  
			   matrix[i][0]=0; //jab sum ka value 0 hain  tab hamee 0 coin chahiye 
			else if(i==0)
			    matrix[0][j]=j;  // jab  coin ka value coin ka value 0 hai  
			else if(j>=a[i]){
				matrix[i][j]= min(matrix[i-1][j] , 1+ matrix[i][j-a[i]]);
			}
			else 
				matrix[i][j]= matrix[i-1][j];

			cout<<matrix[i][j]<<" ";

		}

		
		cout<<endl; 
	}
	return matrix[n-1][total];
}

int main() {
	int arr[] = {1, 2, 3}; 
    int m = sizeof(arr)/sizeof(arr[0]); 
    int total = 22; 
    //cout <<"minimum count total  " <<coincount(arr, m, total ); 
    coincount(arr , m , total);
    return 0; 
     
}
 //op is 8 

****************************************************
//edit distance //
int min(int x, int y, int z)
{
	return min(min(x, y), z);
}

int editDistDP(string str1, string str2, int m, int n)
{
	// Create a table to store results of subproblems
	int dp[m + 1][n + 1];

	// Fill d[][] in bottom up manner
	for (int i = 0; i <= m; i++) {
		for (int j = 0; j <= n; j++) {
			// If first string is empty, only option is to
			// insert all characters of second string
			if (i == 0)
				dp[i][j] = j; // Min. operations = j

			// If second string is empty, only option is to
			// remove all characters of second string
			else if (j == 0)
				dp[i][j] = i; // Min. operations = i

			// If last characters are same, ignore last char
			// and recur for remaining string
			else if (str1[i - 1] == str2[j - 1])
				dp[i][j] = dp[i - 1][j - 1];

			// If the last character is different, consider all
			// possibilities and find the minimum
			else
				dp[i][j] = 1 + min(dp[i][j - 1], // Insert
								dp[i - 1][j], // Remove
								dp[i - 1][j - 1]); // Replace
		}
	}

	return dp[m][n];
}

// Driver program
int main()
{
	// your code goes here
	string str1 = "sunday";
	string str2 = "saturday";

	cout << editDistDP(str1, str2, str1.length(), str2.length());

	return 0;
}

*************************************************
 
# longest common subsequense ke liye dp wale folder me aditya youtube dekh
   LCS (RECURSION method)
#include <bits/stdc++.h>
using namespace std;
int loncomsubseq(string x , string y , int n , int m ){
	if(n==0 ||m==0){
		return 0 ; // base cse hain ek bhi string empty hain
		         // to zero retrn kar do 
	}
	if(x[n-1]==y[m-1]){
		return 1+loncomsubseq(x , y , n-1, m-1);// agar last wala element mach karta hai 
	         // to hame 1 subsequence mil gaya isliye 1 add kiya .aage hum ek size kam kar check 
             // karenge
	}
	else {
		return max(loncomsubseq(x ,y , n,m-1), loncomsubseq(x,y , n-1, m));
	}         // agra last element match nahi karta hain to ek bar hum x ki size kam
	         //karke check karenge aur ek bar y ki size ko kam karke check karenge 
             // dono me se jo max return karga wo return kar denge ;
}            

int main(){

	// string str1 = "ABCDGH";
 //    string str2 = "AEDFHR" ; 
	string str1 = "ABC";
    string str2 = "AC" ;
    cout<< loncomsubseq(str1, str2 , 3 , 2 ); 
	return 0 ; 
}
******************************************************************************* 
LCS (MEMORIZATION METHOD ) 
#include <bits/stdc++.h>
using namespace std;

int t[1001][1001]; // yaha t ka size constrain se ayega 
int lcs(int n, int m, string x, string y){
	
    if(n==0 ||m==0){
		return t[n][m]=0 ; // base cse hain ek bhi string empty hain
	// 	           // to zero retrn kar do 
	}
	if(t[n][m]!=-1)
		return t[m][n];  // agar t martix maain -1 nahihainn iska matlab ye hain ki koi recurion uska 
	                     // uska value nikal diya hain usko store kar do  take aage uska use kar le 

	if(x[n-1]==y[m-1]){
		return t[n][m]= 1+lcs(n-1 , m-1 , x, y );// agar last wala element mach karta hai 
	         // to hame 1 subsequence mil gaya isliye 1 add kiya .aage hum ek size kam kar check 
             // karenge
	}
	else {
		return t[n][m]= max(lcs(n, m-1, x , y ), lcs(n-1 , m , x , y));
	}         
}

int main(){
	
	memset(t ,-1, sizeof(t));// pure array ko -1 se intalize kar diya 
	string str1 = "ABCA";
    string str2 = "AC" ;
    int n = str1.size();
    int m = str2.size();
    // memset(t ,-1, sizeof(t));
    cout<< lcs(n , m, str1, str2  ); 
	// return 0 ; 

	return 0 ; 
}
########################################################################################
   LCS (TOP DOWN) DP 
#include <bits/stdc++.h>
using namespace std;

int  lcs(string x , string y , int n ,int m ){
	int t[n+1][m+1];
	for(int i=0; i<=n ; i++){// base case y string empty hain to 0 put car do
		t[i][0]=0; 
	}
	for(int j=0 ; j<=m ; j++){
		t[0][j]=0;  // k string khali  to colum me zero put kar do 
	}
    
    for(int i=1 ; i<=n ; i++){   // otherwise pure table ko for loop se bhar do 
    	for(int j=1; j<=m ; j++){
    		if(x[i-1]==y[j-1]){ //jab sring compare karenge to ek kam lenge bcz humne n+1 &m+1 size ka tableliya hain   
    		    t[i][j]= 1+t[i-1][j-1];                          //   agar match karta hai to dono  string me se ek kam karke check
    			  // karo .hume yaha ek substring milgaya hain isliye 1 add kiya 
    		}
    		else{
    		   t[i][j]= max(t[i][j-1] ,t[i-1][j]); // agar match nahi kar rahe hain to ek bar 
    	   }                  // ek bar y sting ek back jake check karo aur x ko pura le lo 
    	                  // ya ek bar x ko ek kam kar do aur y ko pura le lo ;
    	}               //t[i][j] me inn dono ka jo max hoga wo aayega  
    }
    
    return t[n][m];

}
 
int main(){
    string str1 = "ABCAde";
    string str2 = "ACa" ;
    //  string str1 = "geeksforgeeks";
    // string str2 = "geeksquizga" ;
    int n = str1.size();
    int m = str2.size();
    cout<<lcs(str1 ,str2 , n, m);
	return 0 ; 
}
***************************************************************************************************************
   Q LONGEST REAPEATING SUBSEQUENCE
   //  Longest Repeating Subsequence
	int LongestRepeatingSubsequence(string str){
		    // Code here
		        int n = str.length();

    // Create and initialize DP table
    int dp[n+1][n+1];
    for (int i=0; i<=n; i++)
        for (int j=0; j<=n; j++)
            dp[i][j] = 0;

    // Fill dp table (similar to LCS loops)
    for (int i=1; i<=n; i++)
    {
        for (int j=1; j<=n; j++)
        {
            // If characters match and indexes are 
            // not same
            if (str[i-1] == str[j-1] && i != j)
                dp[i][j] =  1 + dp[i-1][j-1];          
                     
            // If characters do not match
            else
                dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
        }
    }
    return dp[n][n];         // eg AABEBCDD
                            // ABD , ABD is repeating so longest length  is 3  . o/p is 3 . 
}
// lcs ka ek modify question hain 
is me second string (str2) ko first string man lo fir lcs laga do bas ek cheez ka 
dhayan rakhna hain ki index same nahi honi chaiye  . 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# unbounderd wala bhi wahi hain 

*******************************************
// egg droping problem //
void  eggdroprecursive(int egg ,  int floor ){
    int result;
    int eggflormatriix[egg+1 ][floor+1];
    for(int i=1 ;i<=egg ;  i++){
        eggflormatriix[i][1]=1; // anda chahe jintamarzi utna first floorse ek trail hi hoga 
        eggflormatriix[i][0]=0 ; // agar floor zero hain top trial bhi zero hi lagega 
    }
    for(int j=1 ; j<=floor ; j++){
        eggflormatriix[1][j]=j;  // wrost case jaha anda nahi phutega 

    }
    for(int i=2; i<=egg ; i++){
        for(int j=2 ; j<=floor ; j++){
            eggflormatriix[i][j]=INT_MAX;  
            for(int x=1 ; x<=j; x++ ){
                 result = 1+max((eggflormatriix[i-1][x-1]), eggflormatriix[i][j-x]);
                                 //x floor par anda fut         //x flor par anda nahi futa hain  
                                 // gaya x se niche chek karo      // to x ke uper chek karo kyse 
                 if(result< eggflormatriix[i][j])                // nikalenge total-x ; thik hain 
                      eggflormatriix[i][j]=result;              // is se x ke uper check hoga ; 
            }
            // if(result< eggflormatriix[i][j])
            //     eggflormatriix[i][j]=result;
        }         
    }
    for (int i=1 ; i<=egg ; i++){
        for(int j=1 ; j<=floor; j++){
            cout<<eggflormatriix[i][j]<<" ";
        }
         cout<< endl ; 
    }
}
int main(){
    eggdroprecursive(2,36);
    // sahi run kar raha hain maine yaha matrix print kiya hunn 
    // to  aa raha hain  answer hain iska  8 jki aaa rahabhaiin.

    return 0 ; 
}
**************************************************
// longest increasin subsequence 
void longestsubsequence(int a[] , int n ){
	int t[n]={1} ;
	// suruat me longest subsequence 1 hain  singele single element 

	
	int result;
	
    for(int i=1 ; i< n ; i++){
    	for (int j =0 ; j<i; j++){
    		if (a[j]<a[i])
    			t[i]= max(t[i] , t[j]+1);
    	
    	}
    	// cout<< t[i]<< " " ;     
    }
    sort(t,t+n);
    cout<<t[n-1];
   
}
int main(){
    int arr[] = { 10, 2, 24, 33, 21 ,66 ,0, 99, 50, 41, 6 }; 
	//int arr[] = {3, 10, 2, 1, 20} ;
    int n = sizeof(arr)/sizeof(arr[0]);  
    longestsubsequence(arr , n );
    

	return 0  ; 
}
******************************
// C++ program to find Maximum Product Subarray 
#include <bits/stdc++.h> 
using namespace std; 
  
/* Returns the product of max product subarray.  
Assumes that the given array always has a subarray  
with product more than 1 */
int maxSubarrayProduct(int arr[], int n) 
{ 
    // max positive product ending at the current position 
    int max_ending_here = 1; 
  
    // min negative product ending at the current position 
    int min_ending_here = 1; 
  
    // Initialize overall max product 
    int max_so_far = 1; 
    int flag = 0; 
    /* Traverse through the array. Following values are  
    maintained after the i'th iteration:  
    max_ending_here is always 1 or some positive product  
                    ending with arr[i]  
    min_ending_here is always 1 or some negative product  
                    ending with arr[i] */
    for (int i = 0; i < n; i++) { 
        /* If this element is positive, update max_ending_here.  
        Update min_ending_here only if min_ending_here is  
        negative */
        if (arr[i] > 0) { 
            max_ending_here = max_ending_here * arr[i]; 
            min_ending_here = min(min_ending_here * arr[i], 1); 
            flag = 1; 
        } 
  
         If this element is 0, then the maximum product  
        cannot end here, make both max_ending_here and  
        min_ending_here 0  
        Assumption: Output is alway greater than or equal  
                    to 1. 
        else if (arr[i] == 0) { 
            max_ending_here = 1; 
            min_ending_here = 1; 
        } 
  
         
       /* If element is negative. This is tricky   
        max_ending_here can either be 1 or positive.   
        min_ending_here can either be 1 or negative.   
        next max_ending_here will always be prev.   
        min_ending_here * arr[i] ,next min_ending_here   
        will be 1 if prev max_ending_here is 1, otherwise   
        next min_ending_here will be prev max_ending_here *   
        arr[i] */
  
        else { 
            int temp = max_ending_here; 
            max_ending_here = max(min_ending_here * arr[i], 1); 
            min_ending_here = temp * arr[i]; 
        } 
  
        // update max_so_far, if needed 
        if (max_so_far < max_ending_here) 
            max_so_far = max_ending_here; 
    } 
    if (flag == 0 && max_so_far == 1)      // this from gfg yah  bhi sahi riun kar rahha hain  .
        return 0; 
    return max_so_far; 
} 
  
// Driver code 
int main() 
{ 
    int arr[] = { 1, -2, -3, 0, 7, -8, -2 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Maximum Sub array product is "
         << maxSubarrayProduct(arr, n); 
    return 0; 
} 

****************************
3.5 grid uniqye path 
#define N 3 // yaha macro declare kar diya hain 
int griduniqpath(int a[N][N] ){
	int b[N][N];
	for(int i=0  ; i< N ; i++){
		for(int j=0 ; j<N ; j++){
			b[i][j]=0;
		}
	}
	if(a[0][0]==0){  // yaha se iNtialize kar dia 0,0 position  par 0  hain to b[0][0] ko 1 put kar do 
		b[0][0]=1;
	}
	for(int i=1 ; i<N ; i++){
		if(a[i][0]==0){
			b[i][0]=b[i-1][0];
		}
	}
	for(int j=1 ; j<N ; j++){  // yaha sare coloun ko bhar diya hain agar colu 
		if(a[0][j]==0){
			b[0][j]=b[0][j-1];
		}
	}
	for(int i=1 ; i< N; i++){
		for(int j=1 ; j<N ; j++){
			if(a[i][j]==0){
				b[i][j]= b[i-1][j]+b[i][j-1];
			}
		}
	}
	for(int i=0 ; i<N ; i++){
		for(int j=0 ; j<N  ; j++){
			cout<<b[i][j]<<" ";  // yaha matrix print kar dega 
		}
		cout<<endl ;
	}
	return b[N-1][N-1];
}
                                             // o/p =2 ; jo ki sahi hain 
int main(){
	int mat[N][N] = { {0,0,0}, 
	                  {0 ,1,0},
	                  {0,0,0}
	              }; 
	              // int k =3;
    cout<<griduniqpath(mat );
	return 0 ; }

********************************
bool subsestsumdynamic(int set[], int n , int sum ){
	bool subsetMatrix[n+1][sum+1];
    for (int i =0 ; i<=n; i++){ // ye tab hain jab sum ka bvalue zero us wakat set me kuch bhi ho wo tue hoga 
    	 subsetMatrix[i][0]= true ;
    }
    for (int i =1 ;i<=sum ; i++ ){ // 1 is liye start kiya kyunkin 0 wala upr likh diya hai 
    	 subsetMatrix[0][i]=false;                            // baki sare column me false  ho jayega 
    }
    for(int i=1 ; i<=n ; i++){
    	for(int j=1 ; j<=sum ; j++){
    		if (j<set[i-1])
    			subsetMatrix[i][j]= subsetMatrix[i-1][j]; // j jo humne sum matrix liya hain wo agar kam hua to pichalawala copy kar do
            if(j>=set[i-1])
    		    subsetMatrix[i][j]= subsetMatrix[i-1][j] ||  subsetMatrix[i-1][j-set[i-1]];
    		                                                        //i ka index  set dekhna chahte hain top hume set[i-1] karna hoga  
                                                    // ek to upara jake c hek karo ya upar ja le utna hi pichre chale jaoo waha  jaker chek karo 
    	}
    }
    for(int i=0 ; i<=n ; i++){
    	for (int j=0 ;j<= sum ; j++)
    		cout<< subsetMatrix[i][j]<<" ";
    	
    	cout<< endl  ; 
    }
    
    return subsetMatrix[n][sum] ; 

} 

int main(){
	int set[] = { 3, 34, 4, 12, 5, 2 }; 
    int sum =15 ; 
    int n = sizeof(set) / sizeof(set[0]); 
    if (subsestsumdynamic(set, n, sum) == true) 
       cout<<" Found a subset with given sum "; 
    else
       cout<<"No subset with given sum"; 
    

	cout<< "ye s samajh aa gaya  "; 
	return 0 ;
}

